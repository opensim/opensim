<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mono.Addins</name>
    </assembly>
    <members>
        <member name="T:Mono.Addins.Localization.IAddinLocalizer">
            <summary>
            An add-in localizer.
            </summary>
            <remarks>
            Add-in localizers which want to provide support for localization of plural forms
            can additionally implement <see cref="T:Mono.Addins.Localization.IPluralAddinLocalizer"/>.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Localization.IAddinLocalizer.GetString(System.String)">
            <summary>
            Gets a localized message.
            </summary>
            <returns>
            The localized message.
            </returns>
            <param name='msgid'>
            The message identifier. 
            </param>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeDescriptionCollection">
            <summary>
            A collection of extension nodes
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ObjectDescriptionCollection`1">
            <summary>
            Base class for add-in description collections.
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ObjectDescriptionCollection">
            <summary>
            Base class for add-in description collections.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ObjectDescriptionCollection"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.Add(Mono.Addins.Description.ObjectDescription)">
            <summary>
            Add an object.
            </summary>
            <param name='ep'>
            The object.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.AddRange(Mono.Addins.Description.ObjectDescriptionCollection)">
            <summary>
            Adds a collection of objects.
            </summary>
            <param name='collection'>
            The objects to add.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.Insert(System.Int32,Mono.Addins.Description.ObjectDescription)">
            <summary>
            Insert an object.
            </summary>
            <param name='index'>
            Insertion index.
            </param>
            <param name='ep'>
            The object.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.Remove(Mono.Addins.Description.ObjectDescription)">
            <summary>
            Removes an object.
            </summary>
            <param name='ep'>
            Object to remove.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ObjectDescriptionCollection.Contains(Mono.Addins.Description.ObjectDescription)">
            <summary>
            Checks if an object is present in the collection.
            </summary>
            <param name='ob'>
            Objecect to check.
            </param>
        </member>
        <member name="T:Mono.Addins.NodeElementCollection">
            <summary>
            A collection of NodeElement objects
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.NodeElement"/> at the specified index
            </summary>
            <param name="n">
            Index
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescriptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeDescriptionCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescriptionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeDescription"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescriptionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeDescription"/> with the specified identifier.
            </summary>
            <param name="id">
            Identifier.
            </param>
        </member>
        <member name="T:Mono.Addins.ExtensionPointAttribute">
            <summary>
            Declares an extension point.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionPointAttribute.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionPointAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="path">
            Extension path that identifies the extension point
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionPointAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="path">
            Extension path that identifies the extension point
            </param>
            <param name="nodeType">
            Type of the extension node to be created for extensions
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionPointAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="path">
            Extension path that identifies the extension point
            </param>
            <param name="nodeName">
            Element name to be used when defining an extension in an XML manifest.
            </param>
            <param name="nodeType">
            Type of the extension node to be created for extensions
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.Path">
            <summary>
            Extension path that identifies the extension point
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.Description">
            <summary>
            Long description of the extension point.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.NodeType">
            <summary>
            Type of the extension node to be created for extensions
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.ObjectType">
            <summary>
            Expected extension object type (when nodes are of type TypeExtensionNode)
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.NodeName">
            <summary>
            Element name to be used when defining an extension in an XML manifest. The default name is "Type".
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.Name">
            <summary>
            Display name of the extension point.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionPointAttribute.ExtensionAttributeType">
            <summary>
            Type of the custom attribute to be used to specify metadata for the extension point
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinUrlAttribute">
            <summary>
            Addin URL attribute.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinUrlAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="url">
            Url of the add-in
            </param>
        </member>
        <member name="P:Mono.Addins.AddinUrlAttribute.Url">
            <summary>
            Url of the add-in
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeChildAttribute">
            <summary>
            Declares allowed children of an extension node type.
            </summary>
            <remarks>
            This attribute allows declaring the type of children that an extension node can have.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeChildAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="nodeName">
            Name of the allowed child extension node.
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeChildAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="extensionNodeType">
            Type of the allowed child extension node.
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeChildAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="extensionNodeType">
            Type of the allowed child extension node.
            </param>
            <param name="nodeName">
            Name of the allowed child extension node.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeChildAttribute.NodeName">
            <summary>
            Name of the allowed child extension node.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeChildAttribute.ExtensionNodeType">
            <summary>
            Type of the allowed child extension node.
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinManager">
            <summary>
            Provides access to add-in and extension model management operations.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinManager.Initialize">
            <summary>
            Initializes the add-in engine.
            </summary>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            When initialized with this method, it will look for add-ins in the global add-in registry.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.Initialize(System.String)">
            <summary>
            Initializes the add-in engine.
            </summary>
            <param name="configDir">
            Location of the add-in registry.
            </param>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            Configuration information about the add-in registry will be stored in the
            provided location. The add-in engine will look for add-ins in an 'addins'
            subdirectory of the provided directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.Initialize(System.String,System.String)">
            <summary>
            Initializes the add-in engine.
            </summary>
            <param name='configDir'>
            Location of the add-in registry.
            </param>
            <param name='addinsDir'>
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            Configuration information about the add-in registry will be stored in the
            provided location. The add-in engine will look for add-ins in the provided
            'addinsDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.Initialize(System.String,System.String,System.String)">
            <summary>
            Initializes the add-in engine.
            </summary>
            <param name='configDir'>
            Location of the add-in registry.
            </param>
            <param name='addinsDir'>
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <param name='databaseDir'>
            Location of the add-in database. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            Configuration information about the add-in registry will be stored in the
            provided location. The add-in engine will look for add-ins in the provided
            'addinsDir' directory. Cached information about add-ins will be stored in
            the 'databaseDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.Shutdown">
            <summary>
            Finalizes an add-in engine.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinManager.InitializeDefaultLocalizer(Mono.Addins.Localization.IAddinLocalizer)">
            <summary>
            Sets the default localizer to be used for this add-in engine
            </summary>
            <param name="localizer">
            The add-in localizer
            </param>
        </member>
        <member name="M:Mono.Addins.AddinManager.CheckInstalled(System.String,System.String[])">
            <summary>
            Checks if the provided add-ins are installed, and requests the installation of those
            which aren't.
            </summary>
            <param name="message">
            Message to show to the user when new add-ins have to be installed.
            </param>
            <param name="addinIds">
            List of IDs of the add-ins to be checked.
            </param>
            <remarks>
            This method checks if the specified add-ins are installed.
            If some of the add-ins are not installed, it will use
            the installer assigned to the DefaultAddinInstaller property
            to install them. If the installation fails, or if DefaultAddinInstaller
            is not set, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.IsAddinLoaded(System.String)">
            <summary>
            Checks if an add-in has been loaded.
            </summary>
            <param name="id">
            Full identifier of the add-in.
            </param>
            <returns>
            True if the add-in is loaded.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.LoadAddin(Mono.Addins.IProgressStatus,System.String)">
            <summary>
            Forces the loading of an add-in.
            </summary>
            <param name="statusMonitor">
            Status monitor to keep track of the loading process.
            </param>
            <param name="id">
            Full identifier of the add-in to load.
            </param>
            <remarks>
            This method loads all assemblies that belong to an add-in in memory.
            All add-ins on which the specified add-in depends will also be loaded.
            Notice that in general add-ins don't need to be explicitely loaded using
            this method, since the add-in engine will load them on demand.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.CreateExtensionContext">
            <summary>
            Creates a new extension context.
            </summary>
            <returns>
            The new extension context.
            </returns>
            <remarks>
            Extension contexts can be used to query the extension model using particular condition values.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNode(System.String)">
            <summary>
            Returns the extension node in a path
            </summary>
            <param name="path">
            Location of the node.
            </param>
            <returns>
            The node, or null if not found.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNode``1(System.String)">
            <summary>
            Returns the extension node in a path
            </summary>
            <param name="path">
            Location of the node.
            </param>
            <returns>
            The node, or null if not found.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes(System.String)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.>
            </param>
            <returns>
            All nodes registered in the provided path.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes(System.String,System.Type)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="expectedNodeType">
            Expected node type.
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered under the provided path.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes``1(System.String)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered under the provided path.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes(System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all extension nodes bound to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes(System.Type,System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="expectedNodeType">
            Expected extension node type
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered for the provided type.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided node type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionNodes``1(System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered for the provided type.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the specified node type argument.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.Type)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of objects
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects``1">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <returns>
            A list of objects
            </returns>
            <remarks>
            The type argument of this generic method is the type that defines
            the extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.Type,System.Boolean)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            A list of extension objects.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects``1(System.Boolean)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            A list of extension objects.
            </returns>
            <remarks>
            The type argument of this generic method is the type that defines
            the extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.String)">
            <summary>
            Gets extension objects registered in a path
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.String,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.String,System.Type)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects``1(System.String)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects(System.String,System.Type,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true).
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.GetExtensionObjects``1(System.String,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true).
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.AddExtensionNodeHandler(System.String,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Register a listener of extension node changes.
            </summary>
            <param name="path">
            Path of the node.
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            Hosts can call this method to be subscribed to an extension change
            event for a specific path. The event will be fired once for every
            individual node change. The event arguments include the change type
            (Add or Remove) and the extension node added or removed.
            
            NOTE: The handler will be called for all nodes existing in the path at the moment of registration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.RemoveExtensionNodeHandler(System.String,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Unregister a listener of extension node changes.
            </summary>
            <param name="path">
            Path of the node.
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            This method unregisters a delegate from the node change event of a path.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.AddExtensionNodeHandler(System.Type,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Register a listener of extension node changes.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            Hosts can call this method to be subscribed to an extension change
            event for a specific type extension point. The event will be fired once for every
            individual node change. The event arguments include the change type
            (Add or Remove) and the extension node added or removed.
            
            NOTE: The handler will be called for all nodes existing in the path at the moment of registration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinManager.RemoveExtensionNodeHandler(System.Type,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Unregister a listener of extension node changes.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="handler">
            A handler method.
            </param>
        </member>
        <member name="P:Mono.Addins.AddinManager.IsInitialized">
            <summary>
            Gets whether the add-in engine has been initialized.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinManager.DefaultInstaller">
            <summary>
            Gets the default add-in installer
            </summary>
            <remarks>
            The default installer is used by the CheckInstalled method to request
            the installation of missing add-ins.
            </remarks>
        </member>
        <member name="P:Mono.Addins.AddinManager.DefaultLocalizer">
            <summary>
            Gets the default localizer for this add-in engine
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinManager.CurrentLocalizer">
            <summary>
            Gets the localizer for the add-in that is invoking this property
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinManager.CurrentAddin">
            <summary>
            Gets a reference to the RuntimeAddin object for the add-in that is invoking this property
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinManager.AddinEngine">
            <summary>
            Gets the default add-in engine
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinManager.Registry">
            <summary>
            Gets the add-in registry bound to the default add-in engine
            </summary>
        </member>
        <member name="E:Mono.Addins.AddinManager.ExtensionChanged">
            <summary>
            Extension change event.
            </summary>
            <remarks>
            This event is fired when any extension point in the add-in system changes.
            The event args object provides the path of the changed extension, although
            it does not provide information about what changed. Hosts subscribing to
            this event should get the new list of nodes using a query method such as
            AddinManager.GetExtensionNodes() and then update whatever needs to be updated.
            </remarks>
        </member>
        <member name="E:Mono.Addins.AddinManager.AddinLoadError">
            <summary>
            Add-in loading error event.
            </summary>
            <remarks>
            This event is fired when there is an error when loading the extension
            of an add-in, or any other kind of error that may happen when querying extension points.
            </remarks>
        </member>
        <member name="E:Mono.Addins.AddinManager.AddinLoaded">
            <summary>
            Add-in loaded event.
            </summary>
            <remarks>
            Fired after loading an add-in in memory.
            </remarks>
        </member>
        <member name="E:Mono.Addins.AddinManager.AddinUnloaded">
            <summary>
            Add-in unload event.
            </summary>
            <remarks>
            Fired when an add-in is unloaded from memory. It may happen an add-in is disabled or uninstalled.
            </remarks>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeDescription">
            <summary>
            An extension node definition.
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ObjectDescription">
            <summary>
            Base class for add-in description definitions.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ObjectDescription.Parent">
            <summary>
            Gets the parent object.
            </summary>
            <value>
            The parent object.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ObjectDescription.ParentAddinDescription">
            <summary>
            Gets the parent add-in description.
            </summary>
            <value>
            The parent add-in description.
            </value>
        </member>
        <member name="T:Mono.Addins.NodeElement">
            <summary>
            An extension node element.
            </summary>
            <remarks>
            A raw representation of an extension node. Contains the basic information
            needed to create ExtensionNode instances.
            </remarks>
        </member>
        <member name="M:Mono.Addins.NodeElement.GetAttribute(System.String)">
            <summary>
            Gets element attributes.
            </summary>
            <param name="key">
            Name of the attribute
            </param>
            <returns>
            The value of the attribute
            </returns>
        </member>
        <member name="P:Mono.Addins.NodeElement.NodeName">
            <summary>
            Name of the node element.
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeElement.Attributes">
            <summary>
            Gets all attributes defined in the element.
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeElement.ChildNodes">
            <summary>
            Gets child nodes of this node
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeDescription"/> class.
            </summary>
            <param name="nodeName">
            Node name.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.GetNodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <returns>
            The node type.
            </returns>
            <remarks>
            This method only works when the add-in description to which the node belongs has been
            loaded from an add-in registry.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.GetParentPath">
            <summary>
            Gets the extension path under which this node is registered
            </summary>
            <returns>
            The parent path.
            </returns>
            <remarks>
            For example, if the id of the node is 'ThisNode', and the node is a child of another node with id 'ParentNode', and
            that parent node is defined in an extension with the path '/Core/MainExtension', then the parent path is 'Core/MainExtension/ParentNode'.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>
            The value of the attribute, or an empty string if the attribute is not defined.
            </returns>
            <param name='key'>
            Name of the attribute.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name='key'>
            Name of the attribute
            </param>
            <param name='value'>
            The value.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeDescription.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name='name'>
            Name of the attribute to remove.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.Id">
            <summary>
            Gets or sets the identifier of the node.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.InsertAfter">
            <summary>
            Gets or sets the identifier of the node after which this node has to be inserted
            </summary>
            <value>
            The identifier of the reference node
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.InsertBefore">
            <summary>
            Gets or sets the identifier of the node before which this node has to be inserted
            </summary>
            <value>
            The identifier of the reference node
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.IsCondition">
            <summary>
            Gets a value indicating whether this node is a condition.
            </summary>
            <value>
            <c>true</c> if this node is a condition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.Attributes">
            <summary>
            Gets the attributes of the node.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeDescription.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>
            The child nodes.
            </value>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeType">
            <summary>
            An extension node type definition.
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeSet">
            <summary>
            An extension node set definition.
            </summary>
            <remarks>
            Node sets allow grouping a set of extension node declarations and give an identifier to that group
            (the node set). Once a node set is declared, it can be referenced from several extension points
            which use the same extension node structure. Extension node sets also allow declaring recursive
            extension nodes, that is, extension nodes with a tree structure.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeSet.CopyFrom(Mono.Addins.Description.ExtensionNodeSet)">
            <summary>
            Copies data from another node set
            </summary>
            <param name='nset'>
            Node set from which to copy
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeSet"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeSet.GetAllowedNodeTypes">
            <summary>
            Gets all the allowed node types.
            </summary>
            <returns>
            The allowed node types.
            </returns>
            <remarks>
            Gets all allowed node types, including those defined in included node sets.
            This method only works for descriptions loaded from a registry.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeSet.Id">
            <summary>
            Gets or sets the identifier of the node set.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeSet.NodeTypes">
            <summary>
            Gets the node types allowed in this node set.
            </summary>
            <value>
            The node types.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeSet.NodeSets">
            <summary>
            Gets a list of other node sets included in this node set.
            </summary>
            <value>
            The node sets.
            </value>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeType"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeType.CopyFrom(Mono.Addins.Description.ExtensionNodeType)">
            <summary>
             Copies data from another node set 
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.TypeName">
            <summary>
            Type that implements the extension node.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.NodeName">
            <summary>
            Element name to be used when defining an extension in an XML manifest. The default name is "Type".
            </summary>
            <value>
            The name of the node.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.ObjectTypeName">
            <summary>
            Type of the object that the extension creates (only valid for TypeNodeExtension).
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.ExtensionAttributeTypeName">
            <summary>
            Name of the custom attribute that can be used to declare nodes of this type
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.Description">
            <summary>
            Long description of the node type
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeType.Attributes">
            <summary>
            Attributes supported by the extension node type.
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.AddinDescription">
            <summary>
            An add-in description
            </summary>
            <remarks>
            This class represent an add-in manifest. It has properties for getting
            all information, and methods for loading and saving files.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.AddExtensionPoint(System.String)">
            <summary>
            Adds an extension point.
            </summary>
            <returns>
            The extension point.
            </returns>
            <param name='path'>
            Path that identifies the new extension point.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Save(System.String)">
            <summary>
            Saves the add-in description.
            </summary>
            <param name='fileName'>
            File name where to save this instance
            </param>
            <remarks>
            Saves the add-in description to the specified file and sets the FileName property.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Save">
            <summary>
            Saves the add-in description.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It is thrown if FileName is not set
            </exception>
            <remarks>
            The description is saved to the file specified in the FileName property.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.SaveToXml">
            <summary>
            Generates an XML representation of the add-in description
            </summary>
            <returns>
            An XML manifest.
            </returns>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Read(System.String)">
            <summary>
            Load an add-in description from a file
            </summary>
            <param name='configFile'>
            The file.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Read(System.IO.Stream,System.String)">
            <summary>
            Load an add-in description from a stream
            </summary>
            <param name='stream'>
            The stream
            </param>
            <param name='basePath'>
            The path to be used to resolve relative file paths.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Read(System.IO.TextReader,System.String)">
            <summary>
            Load an add-in description from a text reader
            </summary>
            <param name='reader'>
            The text reader
            </param>
            <param name='basePath'>
            The path to be used to resolve relative file paths.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinDescription.Verify">
            <summary>
            Verify this instance.
            </summary>
            <remarks>
            This method checks all the definitions in the description and returns a list of errors.
            If the returned list is empty, it means that the description is valid.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.AddinFile">
            <summary>
            Gets or sets the path to the main addin file.
            </summary>
            <value>
            The addin file.
            </value>
            <remarks>
            The add-in file can be either the main assembly of an add-in or an xml manifest.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.AddinId">
            <summary>
            Gets the addin identifier.
            </summary>
            <value>
            The addin identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.LocalId">
            <summary>
            Gets or sets the local identifier.
            </summary>
            <value>
            The local identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>
            The namespace.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Name">
            <summary>
            Gets or sets the display name of the add-in.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.CompatVersion">
            <summary>
            Gets or sets the version of the add-in with which this add-in is backwards compatible.
            </summary>
            <value>
            The compat version.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>
            The author.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Url">
            <summary>
            Gets or sets the Url where more information about the add-in can be found.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>
            The copyright.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Description">
            <summary>
            Gets or sets the description of the add-in.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Category">
            <summary>
            Gets or sets the category of the add-in.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.BasePath">
            <summary>
            Gets the base path for locating external files relative to the add-in.
            </summary>
            <value>
            The base path.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.IsRoot">
            <summary>
            Gets or sets a value indicating whether this instance is an add-in root.
            </summary>
            <value>
            <c>true</c> if this instance is an add-in root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.EnabledByDefault">
            <summary>
            Gets or sets a value indicating whether this add-in is enabled by default.
            </summary>
            <value>
            <c>true</c> if enabled by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Flags">
            <summary>
            Gets or sets the add-in flags.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.CanDisable">
            <summary>
            Gets a value indicating whether this add-in can be disabled.
            </summary>
            <value>
            <c>true</c> if this add-in can be disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.CanUninstall">
            <summary>
            Gets a value indicating whether this add-in can be uninstalled.
            </summary>
            <value>
            <c>true</c> if this instance can be uninstalled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.IsHidden">
            <summary>
            Gets a value indicating whether this add-in is hidden.
            </summary>
            <value>
            <c>true</c> if this add-in is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.AllFiles">
            <summary>
            Gets all external files
            </summary>
            <value>
            All files.
            </value>
            <remarks>
            External files are data files and assemblies explicitly referenced in the Runtime section of the add-in manifest.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.AllIgnorePaths">
            <summary>
            Gets all paths to be ignored by the add-in scanner.
            </summary>
            <value>
            All paths to be ignored.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.MainModule">
            <summary>
            Gets the main module.
            </summary>
            <value>
            The main module.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.OptionalModules">
            <summary>
            Gets the optional modules.
            </summary>
            <value>
            The optional modules.
            </value>
            <remarks>
            Optional modules can be used to declare extensions which will be registered only if some specified
            add-in dependencies can be satisfied. Dependencies specified in optional modules are 'soft dependencies',
            which means that they don't need to be satisfied in order to load the add-in.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.AllModules">
            <summary>
            Gets all modules (including the main module and all optional modules)
            </summary>
            <value>
            All modules.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.ExtensionNodeSets">
            <summary>
            Gets the extension node sets.
            </summary>
            <value>
            The extension node sets.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.ExtensionPoints">
            <summary>
            Gets the extension points.
            </summary>
            <value>
            The extension points.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.ConditionTypes">
            <summary>
            Gets the condition types.
            </summary>
            <value>
            The condition types.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Localizer">
            <summary>
            Gets or sets the add-in localizer.
            </summary>
            <value>
            The description of the add-in localizer for this add-in.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.Properties">
            <summary>
            Custom properties specified in the add-in header
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.AddinDescription.FileName">
            <summary>
            Gets or sets file where this description is stored
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="T:Mono.Addins.AddinFlagsAttribute">
            <summary>
            Addin flags attribute.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinFlagsAttribute.#ctor(Mono.Addins.Description.AddinFlags)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="flags">
            Add-in flags
            </param>
        </member>
        <member name="P:Mono.Addins.AddinFlagsAttribute.Flags">
            <summary>
            Add-in flags
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinEventHandler">
            <summary>
            Delegate to be used in add-in engine events
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinEventArgs">
            <summary>
            Provides information about an add-in engine event.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinEventArgs"/> class.
            </summary>
            <param name="addinId">
            Add-in identifier.
            </param>
        </member>
        <member name="P:Mono.Addins.AddinEventArgs.AddinId">
            <summary>
            Identifier of the add-in that generated the event.
            </summary>
        </member>
        <member name="T:Mono.Addins.NodeAttribute">
            <summary>
            Attribute of a NodeElement.
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeAttribute.Name">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeAttribute.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="T:Mono.Addins.Database.IAssemblyLocator">
            <summary>
            Allows finding assemblies in the file system
            </summary>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyLocator.GetAssemblyLocation(System.String)">
            <summary>
            Locates an assembly
            </summary>
            <returns>
            The full path to the assembly, or null if not found
            </returns>
            <param name='fullName'>
            Full name of the assembly
            </param>
        </member>
        <member name="T:Mono.Addins.Description.AddinProperty">
            <summary>
            An add-in property.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.AddinProperty.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.AddinProperty.Locale">
            <summary>
            Locale of the property. It is null if the property is not localized.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.AddinProperty.Value">
            <summary>
            Value of the property.
            </summary>
        </member>
        <member name="T:Mono.Addins.Localization.IAddinLocalizerFactory">
            <summary>
            A localizer factory.
            </summary>
        </member>
        <member name="M:Mono.Addins.Localization.IAddinLocalizerFactory.CreateLocalizer(Mono.Addins.RuntimeAddin,Mono.Addins.NodeElement)">
            <summary>
            Creates a localizer for an add-in.
            </summary>
            <returns>
            The localizer.
            </returns>
            <param name='addin'>
            The add-in for which to create the localizer.
            </param>
            <param name='element'>
            Localizer parameters.
            </param>
        </member>
        <member name="T:Mono.Addins.Description.Dependency">
            <summary>
            Definition of an add-in dependency.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.Dependency.Name">
            <summary>
            Gets the display name of the dependency.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeSetCollection">
            <summary>
            A collection of node sets.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeSetCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeSetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeSet"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeSetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeSet"/> with the specified id.
            </summary>
            <param name="id">
            Identifier.
            </param>
        </member>
        <member name="T:Mono.Addins.AddinEngine">
            <summary>
            An add-in engine.
            </summary>
            <remarks>
            This class allows hosting several independent add-in engines in a single application domain.
            In general, applications use the AddinManager class to query and manage extensions. This class is static,
            so the API is easily accessible. However, some kind applications may need to use several isolated
            add-in engines, and in this case the AddinManager class can't be used, because it is bound to a single
            add-in engine. Those applications can instead create several instances of the AddinEngine class. Each
            add-in engine can be independently initialized with different add-in registries and extension models.
            </remarks>
        </member>
        <member name="T:Mono.Addins.ExtensionContext">
            <summary>
            An extension context.
            </summary>
            <remarks>
            Extension contexts can be used to query the extension tree
            using particular condition values. Extension points which
            declare the availability of a condition type can only be
            queryed using an extension context which provides an
            evaluator for that condition.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.RegisterCondition(System.String,Mono.Addins.ConditionType)">
            <summary>
            Registers a new condition in the extension context.
            </summary>
            <param name="id">
            Identifier of the condition.
            </param>
            <param name="type">
            Condition evaluator.
            </param>
            <remarks>
            The registered condition will be particular to this extension context.
            Any event that might be fired as a result of changes in the condition will
            only be fired in this context.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.RegisterCondition(System.String,System.Type)">
            <summary>
            Registers a new condition in the extension context.
            </summary>
            <param name="id">
            Identifier of the condition.
            </param>
            <param name="type">
            Type of the condition evaluator. Must be a subclass of Mono.Addins.ConditionType.
            </param>
            <remarks>
            The registered condition will be particular to this extension context. Any event
            that might be fired as a result of changes in the condition will only be fired in this context.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNode(System.String)">
            <summary>
            Returns the extension node in a path
            </summary>
            <param name="path">
            Location of the node.
            </param>
            <returns>
            The node, or null if not found.
            </returns>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNode``1(System.String)">
            <summary>
            Returns the extension node in a path
            </summary>
            <param name="path">
            Location of the node.
            </param>
            <returns>
            The node, or null if not found.
            </returns>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes(System.String)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.>
            </param>
            <returns>
            All nodes registered in the provided path.
            </returns>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes``1(System.String)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered under the provided path.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes(System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all extension nodes bound to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes(System.Type,System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="expectedNodeType">
            Expected extension node type
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered for the provided type.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided node type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes``1(System.Type)">
            <summary>
            Gets extension nodes for a type extension point
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered for the provided type.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the specified node type argument.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionNodes(System.String,System.Type)">
            <summary>
            Gets extension nodes registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="expectedNodeType">
            Expected node type.
            </param>
            <returns>
            A list of nodes
            </returns>
            <remarks>
            This method returns all nodes registered under the provided path.
            It will throw a InvalidOperationException if the type of one of
            the registered nodes is not assignable to the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.Type)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <returns>
            A list of objects
            </returns>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects``1">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <returns>
            A list of objects
            </returns>
            <remarks>
            The type argument of this generic method is the type that defines
            the extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.Type,System.Boolean)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            A list of extension objects.
            </returns>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects``1(System.Boolean)">
            <summary>
            Gets extension objects registered for a type extension point.
            </summary>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            A list of extension objects.
            </returns>
            <remarks>
            The type argument of this generic method is the type that defines
            the extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.String)">
            <summary>
            Gets extension objects registered in a path
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.String,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true)
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.String,System.Type)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects``1(System.String)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node.
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects``1(System.String,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true).
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.GetExtensionObjects(System.String,System.Type,System.Boolean)">
            <summary>
            Gets extension objects registered in a path.
            </summary>
            <param name="path">
            An extension path.
            </param>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <param name="reuseCachedInstance">
            When set to True, it will return instances created in previous calls.
            </param>
            <returns>
            An array of objects registered in the path.
            </returns>
            <remarks>
            This method can only be used if all nodes in the provided extension path
            are of type Mono.Addins.TypeExtensionNode. The returned array is composed
            by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if
            reuseCachedInstance is set to true).
            
            An InvalidOperationException exception is thrown if one of the found
            objects is not a subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.AddExtensionNodeHandler(System.String,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Register a listener of extension node changes.
            </summary>
            <param name="path">
            Path of the node.
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            Hosts can call this method to be subscribed to an extension change
            event for a specific path. The event will be fired once for every
            individual node change. The event arguments include the change type
            (Add or Remove) and the extension node added or removed.
            
            NOTE: The handler will be called for all nodes existing in the path at the moment of registration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.RemoveExtensionNodeHandler(System.String,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Unregister a listener of extension node changes.
            </summary>
            <param name="path">
            Path of the node.
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            This method unregisters a delegate from the node change event of a path.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.AddExtensionNodeHandler(System.Type,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Register a listener of extension node changes.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="handler">
            A handler method.
            </param>
            <remarks>
            Hosts can call this method to be subscribed to an extension change
            event for a specific type extension point. The event will be fired once for every
            individual node change. The event arguments include the change type
            (Add or Remove) and the extension node added or removed.
            
            NOTE: The handler will be called for all nodes existing in the path at the moment of registration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionContext.RemoveExtensionNodeHandler(System.Type,Mono.Addins.ExtensionNodeEventHandler)">
            <summary>
            Unregister a listener of extension node changes.
            </summary>
            <param name="instanceType">
            Type defining the extension point
            </param>
            <param name="handler">
            A handler method.
            </param>
        </member>
        <member name="E:Mono.Addins.ExtensionContext.ExtensionChanged">
            <summary>
            Extension change event.
            </summary>
            <remarks>
            This event is fired when any extension point in the add-in system changes.
            The event args object provides the path of the changed extension, although
            it does not provide information about what changed. Hosts subscribing to
            this event should get the new list of nodes using a query method such as
            AddinManager.GetExtensionNodes() and then update whatever needs to be updated.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinEngine"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinEngine.Initialize(System.String)">
            <summary>
            Initializes the add-in engine
            </summary>
            <param name="configDir">
            Location of the add-in registry.
            </param>
            <remarks>The add-in engine needs to be initialized before doing any add-in operation.
            When initialized with this method, it will look for add-in in the add-in registry
            located in the specified path.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.Initialize(System.String,System.String)">
            <summary>
            Initializes the add-in engine.
            </summary>
            <param name='configDir'>
            Location of the add-in registry.
            </param>
            <param name='addinsDir'>
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            Configuration information about the add-in registry will be stored in the
            provided location. The add-in engine will look for add-ins in the provided
            'addinsDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.Initialize(System.String,System.String,System.String)">
            <summary>
            Initializes the add-in engine.
            </summary>
            <param name='configDir'>
            Location of the add-in registry.
            </param>
            <param name='addinsDir'>
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <param name='databaseDir'>
            Location of the add-in database. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            The add-in engine needs to be initialized before doing any add-in operation.
            Configuration information about the add-in registry will be stored in the
            provided location. The add-in engine will look for add-ins in the provided
            'addinsDir' directory. Cached information about add-ins will be stored in
            the 'databaseDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.Shutdown">
            <summary>
            Finalizes the add-in engine.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinEngine.InitializeDefaultLocalizer(Mono.Addins.Localization.IAddinLocalizer)">
            <summary>
            Sets the default localizer to be used for this add-in engine
            </summary>
            <param name="localizer">
            The add-in localizer
            </param>
        </member>
        <member name="M:Mono.Addins.AddinEngine.CheckInstalled(System.String,System.String[])">
            <summary>
            Checks if the provided add-ins are installed, and requests the installation of those
            which aren't.
            </summary>
            <param name="message">
            Message to show to the user when new add-ins have to be installed.
            </param>
            <param name="addinIds">
            List of IDs of the add-ins to be checked.
            </param>
            <remarks>
            This method checks if the specified add-ins are installed.
            If some of the add-ins are not installed, it will use
            the installer assigned to the DefaultAddinInstaller property
            to install them. If the installation fails, or if DefaultAddinInstaller
            is not set, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.IsAddinLoaded(System.String)">
            <summary>
            Checks if an add-in has been loaded.
            </summary>
            <param name="id">
            Full identifier of the add-in.
            </param>
            <returns>
            True if the add-in is loaded.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinEngine.LoadAddin(Mono.Addins.IProgressStatus,System.String)">
            <summary>
            Forces the loading of an add-in.
            </summary>
            <param name="statusMonitor">
            Status monitor to keep track of the loading process.
            </param>
            <param name="id">
            Full identifier of the add-in to load.
            </param>
            <remarks>
            This method loads all assemblies that belong to an add-in in memory.
            All add-ins on which the specified add-in depends will also be loaded.
            Notice that in general add-ins don't need to be explicitely loaded using
            this method, since the add-in engine will load them on demand.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinEngine.CreateExtensionContext">
            <summary>
            Creates a new extension context.
            </summary>
            <returns>
            The new extension context.
            </returns>
            <remarks>
            Extension contexts can be used to query the extension model using particular condition values.
            </remarks>
        </member>
        <member name="E:Mono.Addins.AddinEngine.AddinLoadError">
            <summary>
            Raised when there is an error while loading an add-in
            </summary>
        </member>
        <member name="E:Mono.Addins.AddinEngine.AddinLoaded">
            <summary>
            Raised when an add-in is loaded
            </summary>
        </member>
        <member name="E:Mono.Addins.AddinEngine.AddinUnloaded">
            <summary>
            Raised when an add-in is unloaded
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinEngine.IsInitialized">
            <summary>
            Gets whether the add-in engine has been initialized.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinEngine.DefaultInstaller">
            <summary>
            Gets the default add-in installer
            </summary>
            <remarks>
            The default installer is used by the CheckInstalled method to request
            the installation of missing add-ins.
            </remarks>
        </member>
        <member name="P:Mono.Addins.AddinEngine.DefaultLocalizer">
            <summary>
            Gets the default localizer for this add-in engine
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinEngine.CurrentLocalizer">
            <summary>
            Gets the localizer for the add-in that is invoking this property
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinEngine.CurrentAddin">
            <summary>
            Gets a reference to the RuntimeAddin object for the add-in that is invoking this property
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinEngine.Registry">
            <summary>
            Gets the add-in registry bound to this add-in engine
            </summary>
        </member>
        <member name="T:Mono.Addins.Database.IAssemblyReflector">
            <summary>
            An assembly reflector
            </summary>
            <remarks>
            This interface can be implemented to provide a custom method for getting information about assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.Initialize(Mono.Addins.Database.IAssemblyLocator)">
            <summary>
            Called to initialize the assembly reflector
            </summary>
            <param name='locator'>
            IAssemblyLocator instance which can be used to locate referenced assemblies.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetCustomAttributes(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets a list of custom attributes
            </summary>
            <returns>
            The custom attributes.
            </returns>
            <param name='obj'>
            An assembly, class or class member
            </param>
            <param name='type'>
            Type of the attribute to be returned. It will always be one of the attribute types
            defined in Mono.Addins.
            </param>
            <param name='inherit'>
            'true' if inherited attributes must be returned
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetRawCustomAttributes(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets a list of custom attributes
            </summary>
            <returns>
            The attributes.
            </returns>
            <param name='obj'>
            An assembly, class or class member
            </param>
            <param name='type'>
            Base type of the attribute to be returned
            </param>
            <param name='inherit'>
            'true' if inherited attributes must be returned
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.LoadAssembly(System.String)">
            <summary>
            Loads an assembly.
            </summary>
            <returns>
            The loaded assembly
            </returns>
            <param name='file'>
            Path of the assembly.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.LoadAssemblyFromReference(System.Object)">
            <summary>
            Loads the assembly specified in an assembly reference
            </summary>
            <returns>
            The assembly
            </returns>
            <param name='asmReference'>
            An assembly reference
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetResourceNames(System.Object)">
            <summary>
            Gets the names of all resources embedded in an assembly
            </summary>
            <returns>
            The names of the resources
            </returns>
            <param name='asm'>
            An assembly
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetResourceStream(System.Object,System.String)">
            <summary>
            Gets the data stream of a resource
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='asm'>
            An assembly
            </param>
            <param name='resourceName'>
            The name of a resource
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetAssemblyTypes(System.Object)">
            <summary>
            Gets all types defined in an assembly
            </summary>
            <returns>
            The types
            </returns>
            <param name='asm'>
            An assembly
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetAssemblyReferences(System.Object)">
            <summary>
            Gets all assembly references of an assembly
            </summary>
            <returns>
            A list of assembly references
            </returns>
            <param name='asm'>
            An assembly
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetType(System.Object,System.String)">
            <summary>
            Looks for a type in an assembly
            </summary>
            <returns>
            The type.
            </returns>
            <param name='asm'>
            An assembly
            </param>
            <param name='typeName'>
            Name of the type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetCustomAttribute(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets a custom attribute
            </summary>
            <returns>
            The custom attribute.
            </returns>
            <param name='obj'>
            An assembly, class or class member
            </param>
            <param name='type'>
            Base type of the attribute to be returned. It will always be one of the attribute types
            defined in Mono.Addins.
            </param>
            <param name='inherit'>
            'true' if inherited attributes must be returned
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetTypeName(System.Object)">
            <summary>
            Gets the name of a type (not including namespace)
            </summary>
            <returns>
            The type name.
            </returns>
            <param name='type'>
            A type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetTypeFullName(System.Object)">
            <summary>
            Gets the full name of a type (including namespace)
            </summary>
            <returns>
            The full name of the type
            </returns>
            <param name='type'>
            A type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetTypeAssemblyQualifiedName(System.Object)">
            <summary>
            Gets the assembly qualified name of a type
            </summary>
            <returns>
            The assembly qualified type name
            </returns>
            <param name='type'>
            A type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetBaseTypeFullNameList(System.Object)">
            <summary>
            Gets a list of all base types (including interfaces) of a type
            </summary>
            <returns>
            An enumeration of the full name of all base types of the type
            </returns>
            <param name='type'>
            A type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.TypeIsAssignableFrom(System.Object,System.Object)">
            <summary>
            Checks if a type is assignable to another type
            </summary>
            <returns>
            'true' if the type is assignable
            </returns>
            <param name='baseType'>
            Expected base type.
            </param>
            <param name='type'>
            A type.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetFields(System.Object)">
            <summary>
            Gets the fields of a type
            </summary>
            <returns>
            The fields.
            </returns>
            <param name='type'>
            A type
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetFieldName(System.Object)">
            <summary>
            Gets the name of a field.
            </summary>
            <returns>
            The field name.
            </returns>
            <param name='field'>
            A field.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.IAssemblyReflector.GetFieldTypeFullName(System.Object)">
            <summary>
            Gets the full name of the type of a field
            </summary>
            <returns>
            The full type name
            </returns>
            <param name='field'>
            A field.
            </param>
        </member>
        <member name="T:Mono.Addins.Database.CustomAttribute">
            <summary>
            A custom attribute
            </summary>
        </member>
        <member name="P:Mono.Addins.Database.CustomAttribute.TypeName">
            <summary>
            Full name of the type of the custom attribute
            </summary>
        </member>
        <member name="T:Mono.Addins.TypeExtensionPointAttribute">
            <summary>
            Declares an extension point bound to a type
            </summary>
        </member>
        <member name="M:Mono.Addins.TypeExtensionPointAttribute.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Mono.Addins.TypeExtensionPointAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="path">
            Path that identifies the extension point
            </param>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.Path">
            <summary>
            Path that identifies the extension point
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.Description">
            <summary>
            Description of the extension point.
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.NodeName">
            <summary>
            Element name to be used when defining an extension in an XML manifest. The default name is "Type".
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.Name">
            <summary>
            Display name of the extension point.
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.NodeType">
            <summary>
            Type of the extension node to be created for extensions
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionPointAttribute.ExtensionAttributeType">
            <summary>
            Type of the custom attribute to be used to specify metadata for the extension point
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.AddinFlags">
            <summary>
            Add-in flags
            </summary>
        </member>
        <member name="F:Mono.Addins.Description.AddinFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:Mono.Addins.Description.AddinFlags.CantUninstall">
            <summary>
            The add-in can't be uninstalled
            </summary>
        </member>
        <member name="F:Mono.Addins.Description.AddinFlags.CantDisable">
            <summary>
            The add-in can't be disabled
            </summary>
        </member>
        <member name="F:Mono.Addins.Description.AddinFlags.Hidden">
            <summary>
            The add-in is not visible to end users
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionCollection">
            <summary>
            A collection of extensions
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.Extension"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="T:Mono.Addins.InstanceExtensionNode">
            <summary>
            Base class for extension nodes which create extension objects
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNode">
            <summary>
            A node of the extension model.
            </summary>
            <remarks>
            An extension node is an element registered by an add-in in an extension point.
            A host can get nodes registered in an extension point using methods such as
            AddinManager.GetExtensionNodes(string), which returns a collection of ExtensionNode objects.
            
            ExtensionNode will normally be used as a base class of more complex extension point types.
            The most common subclass is Mono.Addins.TypeExtensionNode, which allows registering a class
            implemented in an add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects">
            <summary>
            Returns the child objects of a node.
            </summary>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the
            TypeExtensionNode.GetInstance() method for each node.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects(System.Boolean)">
            <summary>
            Returns the child objects of a node.
            </summary>
            <param name="reuseCachedInstance">
            True if the method can reuse instances created in previous calls.
            </param>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if reuseCachedInstance is set to true).
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects(System.Type)">
            <summary>
            Returns the child objects of a node (with type check).
            </summary>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the
            TypeExtensionNode.GetInstance(Type) method for each node.
            
            An InvalidOperationException exception is thrown if one of the found child objects is not a
            subclass of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects``1">
            <summary>
            Returns the child objects of a node (casting to the specified type)
            </summary>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the
            TypeExtensionNode.GetInstance() method for each node.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects(System.Type,System.Boolean)">
            <summary>
            Returns the child objects of a node (with type check).
            </summary>
            <param name="arrayElementType">
            Type of the return array elements.
            </param>
            <param name="reuseCachedInstance">
            True if the method can reuse instances created in previous calls.
            </param>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the TypeExtensionNode.CreateInstance(Type)
            method for each node (or TypeExtensionNode.GetInstance(Type) if reuseCachedInstance is set to true).
            
            An InvalidOperationException exception will be thrown if one of the found child objects is not a subclass
            of the provided type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.GetChildObjects``1(System.Boolean)">
            <summary>
            Returns the child objects of a node (casting to the specified type).
            </summary>
            <param name="reuseCachedInstance">
            True if the method can reuse instances created in previous calls.
            </param>
            <returns>
            An array of child objects.
            </returns>
            <remarks>
            This method only works if all children of this node are of type Mono.Addins.TypeExtensionNode.
            The returned array is composed by all objects created by calling the TypeExtensionNode.CreateInstance()
            method for each node (or TypeExtensionNode.GetInstance() if reuseCachedInstance is set to true).
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.Read(Mono.Addins.NodeElement)">
            <summary>
            Reads the extension node data
            </summary>
            <param name='elem'>
            The element containing the extension data
            </param>
            <remarks>
            This method can be overriden to provide a custom method for reading extension node data from an element.
            The default implementation reads the attributes if the element and assigns the values to the fields
            and properties of the extension node that have the corresponding [NodeAttribute] decoration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.OnAddinLoaded">
            <summary>
            Called when the add-in that defined this extension node is actually loaded in memory.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.OnAddinUnloaded">
            <summary>
            Called when the add-in that defined this extension node is being
            unloaded from memory.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.OnChildrenChanged">
            <summary>
            Called when the children list of this node has changed. It may be due to add-ins
            being loaded/unloaded, or to conditions being changed.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.OnChildNodeAdded(Mono.Addins.ExtensionNode)">
            <summary>
            Called when a child node is added
            </summary>
            <param name="node">
            Added node.
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionNode.OnChildNodeRemoved(Mono.Addins.ExtensionNode)">
            <summary>
            Called when a child node is removed
            </summary>
            <param name="node">
            Removed node.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.Id">
            <summary>
            Identifier of the node.
            </summary>
            <remarks>
            It is not mandatory to specify an 'id' for a node. When none is provided,
            the add-in manager will automatically generate an unique id for the node.
            The ExtensionNode.HasId property can be used to know if the 'id' has been
            specified by the developer or not.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.Path">
            <summary>
            Location of this node in the extension tree.
            </summary>
            <remarks>
            The node path is composed by the path of the extension point where it is defined,
            the identifiers of its parent nodes, and its own identifier.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.Parent">
            <summary>
            Parent node of this node.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.ExtensionContext">
            <summary>
            Extension context to which this node belongs
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.HasId">
            <summary>
            Specifies whether the extension node has as an Id or not.
            </summary>
            <remarks>
            It is not mandatory to specify an 'id' for a node. When none is provided,
            the add-in manager will automatically generate an unique id for the node.
            This property will return true if an 'id' was provided for the node, and
            false if the id was assigned by the add-in manager.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.Addin">
            <summary>
            The add-in that registered this extension node.
            </summary>
            <remarks>
            This property provides access to the resources and types of the add-in that created this extension node.
            </remarks>
        </member>
        <member name="E:Mono.Addins.ExtensionNode.ExtensionNodeChanged">
            <summary>
            Notifies that a child node of this node has been added or removed.
            </summary>
            <remarks>
            The first time the event is subscribed, the handler will be called for each existing node.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionNode.ChildNodes">
            <summary>
            Child nodes of this extension node.
            </summary>
        </member>
        <member name="M:Mono.Addins.InstanceExtensionNode.GetInstance(System.Type)">
            <summary>
            Gets the extension object declared by this node
            </summary>
            <param name="expectedType">
            Expected object type. An exception will be thrown if the object is not an instance of the specified type.
            </param>
            <returns>
            The extension object
            </returns>
            <remarks>
            The extension object is cached and the same instance will be returned at every call.
            </remarks>
        </member>
        <member name="M:Mono.Addins.InstanceExtensionNode.GetInstance">
            <summary>
            Gets the extension object declared by this node
            </summary>
            <returns>
            The extension object
            </returns>
            <remarks>
            The extension object is cached and the same instance will be returned at every call.
            </remarks>
        </member>
        <member name="M:Mono.Addins.InstanceExtensionNode.CreateInstance(System.Type)">
            <summary>
            Creates a new extension object
            </summary>
            <param name="expectedType">
            Expected object type. An exception will be thrown if the object is not an instance of the specified type.
            </param>
            <returns>
            The extension object
            </returns>
        </member>
        <member name="M:Mono.Addins.InstanceExtensionNode.CreateInstance">
            <summary>
            Creates a new extension object
            </summary>
            <returns>
            The extension object
            </returns>
        </member>
        <member name="T:Mono.Addins.AddinDependencyAttribute">
            <summary>
            Declares a dependency on an add-in or add-in host
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinDependencyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="id">
            Identifier of the add-in
            </param>
            <param name="version">
            Version of the add-in
            </param>
        </member>
        <member name="P:Mono.Addins.AddinDependencyAttribute.Id">
            <summary>
            Identifier of the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinDependencyAttribute.Version">
            <summary>
            Version of the add-in
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNode`1">
            <summary>
            An extension node with custom metadata
            </summary>
            <remarks>
            This is the default type for extension nodes bound to a custom extension attribute.
            </remarks>
        </member>
        <member name="T:Mono.Addins.IAttributedExtensionNode">
            <summary>
            An extension node with custom metadata provided by an attribute
            </summary>
            <remarks>
            This interface is implemented by ExtensionNode&lt;T&gt; to provide non-generic access to the attribute instance.
            </remarks>
        </member>
        <member name="P:Mono.Addins.IAttributedExtensionNode.Attribute">
            <summary>
            The custom attribute containing the extension metadata
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNode`1.Data">
            <summary>
            The custom attribute containing the extension metadata
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinPropertyAttribute">
            <summary>
            Defines an add-in property
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinPropertyAttribute"/> class.
            </summary>
            <param name="name">
            Name of the property
            </param>
            <param name="value">
            Value of the property
            </param>
        </member>
        <member name="M:Mono.Addins.AddinPropertyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinPropertyAttribute"/> class.
            </summary>
            <param name="name">
            Name of the property
            </param>
            <param name="locale">
            Locale of the property. It can be null if the property is not bound to a locale.
            </param>
            <param name="value">
            Value of the property
            </param>
        </member>
        <member name="P:Mono.Addins.AddinPropertyAttribute.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinPropertyAttribute.Locale">
            <summary>
            Locale of the property. It can be null if the property is not bound to a locale.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinPropertyAttribute.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="T:Mono.Addins.CustomExtensionAttribute">
            <summary>
            Base class for custon extension attributes.
            </summary>
            <remarks>
            Custom extension attributes can be used to declare extensions with custom metadata.
            All custom extension attributes must subclass CustomExtensionAttribute.
            </remarks>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.Id">
            <summary>
            Identifier of the node
            </summary>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.InsertBefore">
            <summary>
            Identifier of the node before which this node has to be placed
            </summary>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.InsertAfter">
            <summary>
            Identifier of the node after which this node has to be placed
            </summary>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.Path">
            <summary>
            Path of the extension point being extended.
            </summary>
            <remarks>
            This property is optional and useful only when there are several extension points which allow
            using this custom attribute to define extensions.
            </remarks>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.ExtensionNode">
            <summary>
            The extension node bound to this attribute
            </summary>
        </member>
        <member name="P:Mono.Addins.CustomExtensionAttribute.Addin">
            <summary>
            The add-in that registered this extension node.
            </summary>
            <remarks>
            This property provides access to the resources and types of the add-in that created this extension node.
            </remarks>
        </member>
        <member name="T:Mono.Addins.Localization.IPluralAddinLocalizer">
            <summary>
            A localizer that supports localization of plural forms.
            </summary>
            <remarks>
            This interface can be implemented by add-in localizers which want to provide
            support plural forms.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Localization.IPluralAddinLocalizer.GetPluralString(System.String,System.String,System.Int32)">
            <summary>
            Gets a localized message which may contain plural forms.
            </summary>
            <returns>
            The localized message.
            </returns>
            <param name='singular'>
            Message identifier to use when the specified count is 1.
            </param>
            <param name='defaultPlural'>
            Default message identifier to use when the specified count is not 1.
            </param>
            <param name='n'>
            The count that determines which plural form to use.
            </param>
        </member>
        <member name="T:Mono.Addins.AddinLocalizer">
            <summary>
            Converts message identifiers to localized messages.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetString(System.String)">
            <summary>
            Gets a localized message
            </summary>
            <param name="msgid">
            Message identifier
            </param>
            <returns>
            The localized message
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetString(System.String,System.String[])">
            <summary>
            Gets a formatted and localized message
            </summary>
            <param name="msgid">
            Message identifier (can contain string format placeholders)
            </param>
            <param name="args">
            Arguments for the string format operation
            </param>
            <returns>
            The formatted and localized string
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetString(System.String,System.Object[])">
            <summary>
            Gets a formatted and localized message
            </summary>
            <param name="msgid">
            Message identifier (can contain string format placeholders)
            </param>
            <param name="args">
            Arguments for the string format operation
            </param>
            <returns>
            The formatted and localized string
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetPluralString(System.String,System.String,System.Int32)">
            <summary>
            Gets a localized plural form for a message identifier
            </summary>
            <param name="msgid">
            Message identifier for the singular form
            </param>
            <param name="defaultPlural">
            Default result message for the plural form
            </param>
            <param name="n">
            Value count. Determines wether to use singular or plural form.
            </param>
            <returns>
            The localized message
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetPluralString(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Gets a localized and formatted plural form for a message identifier
            </summary>
            <param name="singular">
            Message identifier for the singular form (can contain string format placeholders)
            </param>
            <param name="defaultPlural">
            Default result message for the plural form (can contain string format placeholders)
            </param>
            <param name="n">
            Value count. Determines whether to use singular or plural form.
            </param>
            <param name="args">
            Arguments for the string format operation
            </param>
            <returns>
            The localized message
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinLocalizer.GetPluralString(System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Gets a localized and formatted plural form for a message identifier
            </summary>
            <param name="singular">
            Message identifier for the singular form (can contain string format placeholders)
            </param>
            <param name="defaultPlural">
            Default result message for the plural form (can contain string format placeholders)
            </param>
            <param name="n">
            Value count. Determines whether to use singular or plural form.
            </param>
            <param name="args">
            Arguments for the string format operation
            </param>
            <returns>
            The localized message
            </returns>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionPointCollection">
            <summary>
            A collection of extension point definitions.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionPointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionPointCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPointCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionPoint"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPointCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionPoint"/> with the specified path.
            </summary>
            <param name="path">
            Path.
            </param>
        </member>
        <member name="T:Mono.Addins.AddinLocalizerGettextAttribute">
            <summary>
            Declares a Gettext-based localizer for an add-in
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinLocalizerGettextAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinLocalizerGettextAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinLocalizerGettextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinLocalizerGettextAttribute"/> class.
            </summary>
            <param name="catalog">
            Name of the catalog which contains the strings.
            </param>
        </member>
        <member name="M:Mono.Addins.AddinLocalizerGettextAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinLocalizerGettextAttribute"/> class.
            </summary>
            <param name="catalog">
            Name of the catalog which contains the strings.
            </param>
            <param name="location">
            Relative path to the location of the catalog. This path must be relative to the add-in location.
            </param>
            <remarks>
            The location path must contain a directory structure like this:
            
            {language-id}/LC_MESSAGES/{Catalog}.mo
            
            For example, the catalog for spanish strings would be located at:
            
            locale/es/LC_MESSAGES/some-addin.mo
            </remarks>
        </member>
        <member name="P:Mono.Addins.AddinLocalizerGettextAttribute.Catalog">
            <summary>
            Name of the catalog which contains the strings.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinLocalizerGettextAttribute.Location">
            <summary>
            Relative path to the location of the catalog. This path must be relative to the add-in location.
            </summary>
            <remarks>
            When not specified, the default value of this property is 'locale'.
            The location path must contain a directory structure like this:
            
            {language-id}/LC_MESSAGES/{Catalog}.mo
            
            For example, the catalog for spanish strings would be located at:
            
            locale/es/LC_MESSAGES/some-addin.mo
            </remarks>
        </member>
        <member name="T:Mono.Addins.AddinAuthorAttribute">
            <summary>
            Declares an author of the add-in
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinAuthorAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="name">
            Name of the author
            </param>
        </member>
        <member name="P:Mono.Addins.AddinAuthorAttribute.Name">
            <summary>
            Author name
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ConditionTypeDescription">
            <summary>
            A condition type definition.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ConditionTypeDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ConditionTypeDescription"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ConditionTypeDescription.CopyFrom(Mono.Addins.Description.ConditionTypeDescription)">
            <summary>
            Copies data from another condition type definition
            </summary>
            <param name='cond'>
            Condition from which to copy
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ConditionTypeDescription.Id">
            <summary>
            Gets or sets the identifier of the condition type
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ConditionTypeDescription.TypeName">
            <summary>
            Gets or sets the name of the type that implements the condition
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ConditionTypeDescription.Description">
            <summary>
            Gets or sets the description of the condition.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionPoint">
            <summary>
            An extension point definition.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionPoint"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionPoint.CopyFrom(Mono.Addins.Description.ExtensionPoint)">
            <summary>
            Copies another extension point.
            </summary>
            <param name='ep'>
            Extension point from which to copy.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionPoint.AddExtensionNode(System.String,System.String)">
            <summary>
            Adds an extension node type.
            </summary>
            <returns>
            The extension node type.
            </returns>
            <param name='name'>
            Name of the node
            </param>
            <param name='typeName'>
            Name of the type that implements the extension node.
            </param>
            <remarks>
            This method can be used to register a new allowed node type for the extension point.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.Path">
            <summary>
            Gets or sets the path that identifies the extension point.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.Name">
            <summary>
            Gets or sets the display name of the extension point.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.Description">
            <summary>
            Gets or sets the description of the extension point.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.ExtenderAddins">
            <summary>
            Gets a list of add-ins that extend this extension point.
            </summary>
            <remarks>
            This value is only available when the add-in description is loaded from an add-in registry.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.NodeSet">
            <summary>
            A node set which specifies the node types allowed in this extension point.
            </summary>
            <value>
            The node set.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionPoint.Conditions">
            <summary>
            Gets the conditions available in this node set.
            </summary>
            <value>
            The conditions.
            </value>
        </member>
        <member name="T:Mono.Addins.ConditionType">
            <summary>
            A condition evaluator.
            </summary>
            <remarks>
            Add-ins may use conditions to register nodes in an extension point which
            are only visible under some contexts. For example, an add-in registering
            a custom menu option to the main menu of a sample text editor might want
            to make that option visible only for some kind of files. To allow add-ins
            to do this kind of check, the host application needs to define a new condition.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ConditionType.Evaluate(Mono.Addins.NodeElement)">
            <summary>
            Evaluates the condition.
            </summary>
            <param name="conditionNode">
            Condition node information.
            </param>
            <returns>
            'true' if the condition is satisfied.
            </returns>
        </member>
        <member name="M:Mono.Addins.ConditionType.NotifyChanged">
            <summary>
            Notifies that the condition has changed, and that it has to be re-evaluated.
            </summary>
            This method must be called when there is a change in the state that determines
            the result of the evaluation. When this method is called, all node conditions
            depending on it are reevaluated and the corresponding events for adding or
            removing extension nodes are fired.
            <remarks>
            </remarks>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeList">
            <summary>
            A list of extension nodes.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeList.GetEnumerator">
            <summary>
            Gets an enumerator which enumerates all nodes in the list
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeList.CopyTo(Mono.Addins.ExtensionNode[],System.Int32)">
            <summary>
            Copies all nodes to an array
            </summary>
            <param name='array'>
            The target array
            </param>
            <param name='index'>
            Initial index where to copy to
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList.Item(System.Int32)">
            <summary>
            Returns the node in the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList.Item(System.String)">
            <summary>
            Returns the node with the specified ID.
            </summary>
            <param name="id">
            An id.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList.Count">
            <summary>
            Number of nodes of the collection.
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeList`1">
            <summary>
            A list of extension nodes.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeList`1.GetEnumerator">
            <summary>
            Gets an enumerator which enumerates all nodes in the list
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all nodes to an array
            </summary>
            <param name='array'>
            The target array
            </param>
            <param name='index'>
            Initial index where to copy to
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList`1.Item(System.Int32)">
            <summary>
            Returns the node in the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList`1.Item(System.String)">
            <summary>
            Returns the node with the specified ID.
            </summary>
            <param name="id">
            An id.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeList`1.Count">
            <summary>
            Number of nodes of the collection.
            </summary>
        </member>
        <member name="T:Mono.Addins.MissingDependencyException">
            <summary>
            Exception thrown when the add-in engine can't find a required add-in dependency
            </summary>
        </member>
        <member name="T:Mono.Addins.TypeExtensionNode">
            <summary>
            An extension node which specifies a type.
            </summary>
            <remarks>
            This class is a kind of Mono.Addins.ExtensionNode which can be used to register
            types in an extension point. This is a very common case: a host application
            defines an interface, and add-ins create classes that implement that interface.
            The host will define an extension point which will use TypeExtensionNode as nodetext
            type. Add-ins will register the classes they implement in that extension point.
            
            When the nodes of an extension point are of type TypeExtensionNode it is then
            possible to use query methods such as AddinManager.GetExtensionObjects(string),
            which will get all nodes in the provided extension path and will create an object
            for each node.
            
            When declaring extension nodes in an add-in manifest, the class names can be
            specified using the 'class' or 'type' attribute. If none of those attributes is
            provided, the class name will be taken from the 'id' attribute.
            
            TypeExtensionNode is the default extension type used when no type is provided
            in the definition of an extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.TypeExtensionNode.Read(Mono.Addins.NodeElement)">
            <summary>
            Reads the extension node data
            </summary>
            <param name='elem'>
            The element containing the extension data
            </param>
            <remarks>
            This method can be overriden to provide a custom method for reading extension node data from an element.
            The default implementation reads the attributes if the element and assigns the values to the fields
            and properties of the extension node that have the corresponding [NodeAttribute] decoration.
            </remarks>
        </member>
        <member name="M:Mono.Addins.TypeExtensionNode.CreateInstance">
            <summary>
            Creates a new extension object
            </summary>
            <returns>
            The extension object
            </returns>
        </member>
        <member name="P:Mono.Addins.TypeExtensionNode.Type">
            <summary>
            Type of the object that this node creates
            </summary>
        </member>
        <member name="P:Mono.Addins.TypeExtensionNode.TypeName">
            <summary>
            Name of the type of the object that this node creates
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:Mono.Addins.TypeExtensionNode`1">
            <summary>
            An extension node which specifies a type with custom extension metadata
            </summary>
            <remarks>
            This is the default type for type extension nodes bound to a custom extension attribute.
            </remarks>
        </member>
        <member name="P:Mono.Addins.TypeExtensionNode`1.Data">
            <summary>
            The custom attribute containing the extension metadata
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinDescriptionAttribute">
            <summary>
            Describes the purpose of an add-in or add-in root
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinDescriptionAttribute"/> class.
            </summary>
            <param name="description">
            Description of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.AddinDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinDescriptionAttribute"/> class.
            </summary>
            <param name="description">
            Description of the add-in
            </param>
            <param name="locale">
            Locale of the description (for example, 'en-US', or 'en')
            </param>
        </member>
        <member name="P:Mono.Addins.AddinDescriptionAttribute.Description">
            <value>
            Description of the add-in
            </value>
        </member>
        <member name="P:Mono.Addins.AddinDescriptionAttribute.Locale">
            <summary>
            Locale of the description (for example, 'en-US', or 'en')
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinRootAttribute">
            <summary>
            Marks an assembly as being an add-in root.
            </summary>
            <remarks>
            An add-in root is an assemly which can be extended by add-ins.
            </remarks>
        </member>
        <member name="T:Mono.Addins.AddinAttribute">
            <summary>
            Marks an assembly as being an add-in.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinAttribute.#ctor">
            <summary>
            Initializes an add-in marker attribute
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinAttribute.#ctor(System.String)">
            <summary>
            Initializes an add-in marker attribute
            </summary>
            <param name="id">
            Identifier of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.AddinAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an add-in marker attribute
            </summary>
            <param name="id">
            Identifier of the add-in
            </param>
            <param name="version">
            Version of the add-in
            </param>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Id">
            <summary>
            Identifier of the add-in.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Version">
            <summary>
            Version of the add-in.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.CompatVersion">
            <summary>
            Version of the add-in with which this add-in is backwards compatible.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Namespace">
            <summary>
            Namespace of the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Category">
            <summary>
            Category of the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Url">
            <summary>
            Url to a web page with more information about the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.EnabledByDefault">
            <summary>
            When set to True, the add-in will be automatically enabled after installing.
            It's True by default.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinAttribute.Flags">
            <summary>
            Add-in flags
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinRootAttribute.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinRootAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="id">
            Identifier of the add-in root
            </param>
        </member>
        <member name="M:Mono.Addins.AddinRootAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="id">
            Identifier of the add-in root
            </param>
            <param name="version">
            Version of the add-in root
            </param>
        </member>
        <member name="T:Mono.Addins.Description.Extension">
            <summary>
            An extension definition.
            </summary>
            <remarks>
            An Extension is a collection of nodes which have to be registered in an extension point.
            The target extension point is specified in the <see cref="T:Mono.Addins.Description.Extension"/>.Path property.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.Extension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.Extension"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.Extension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.Extension"/> class.
            </summary>
            <param name="path">
            Path that identifies the extension point being extended
            </param>
        </member>
        <member name="M:Mono.Addins.Description.Extension.GetExtendedObject">
            <summary>
            Gets the object extended by this extension
            </summary>
            <returns>
            The extended object can be an <see cref="T:Mono.Addins.Description.ExtensionPoint"/> or
            an <see cref="T:Mono.Addins.Description.ExtensionNodeDescription"/>.
            </returns>
            <remarks>
            This method only works when the add-in description to which the extension belongs has been
            loaded from an add-in registry.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.Extension.GetAllowedNodeTypes">
            <summary>
            Gets the node types allowed in this extension.
            </summary>
            <returns>
            The allowed node types.
            </returns>
            <remarks>
            This method only works when the add-in description to which the extension belongs has been
            loaded from an add-in registry.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.Extension.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.Extension"/> class.
            </summary>
            <param name="element">
            XML that describes the extension.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.Extension.Path">
            <summary>
            Gets or sets the path that identifies the extension point being extended.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.Extension.ExtensionNodes">
            <summary>
            Gets the extension nodes.
            </summary>
            <value>
            The extension nodes.
            </value>
        </member>
        <member name="T:Mono.Addins.ExtensionEventHandler">
            <summary>
            Delegate to be used in extension point subscriptions
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeEventHandler">
            <summary>
            Delegate to be used in extension point subscriptions
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionEventArgs">
            <summary>
            Arguments for extension events.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="path">
            Path of the extension node that has changed.
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionEventArgs.PathChanged(System.String)">
            <summary>
            Checks if a path has changed.
            </summary>
            <param name="pathToCheck">
            An extension path.
            </param>
            <returns>
            'true' if the path is affected by the extension change event.
            </returns>
            <remarks>
            Checks if the specified path or any of its children paths is affected by the extension change event.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionEventArgs.Path">
            <summary>
            Path of the extension node that has changed.
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeEventArgs">
            <summary>
            Arguments for extension node events.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeEventArgs.#ctor(Mono.Addins.ExtensionChange,Mono.Addins.ExtensionNode)">
            <summary>
            Creates a new instance
            </summary>
            <param name="change">
            Type of change.
            </param>
            <param name="node">
            Node that has been added or removed.
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeEventArgs.Path">
            <summary>
            Path of the extension that changed.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeEventArgs.Change">
            <summary>
            Type of change.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeEventArgs.ExtensionNode">
            <summary>
            Node that has been added or removed.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeEventArgs.ExtensionObject">
            <summary>
            Extension object that has been added or removed.
            </summary>
        </member>
        <member name="T:Mono.Addins.ExtensionChange">
            <summary>
            Type of change in an extension change event.
            </summary>
        </member>
        <member name="F:Mono.Addins.ExtensionChange.Add">
            <summary>
            An extension node has been added.
            </summary>
        </member>
        <member name="F:Mono.Addins.ExtensionChange.Remove">
            <summary>
            An extension node has been removed.
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinNameAttribute">
            <summary>
            Sets the display name of an add-in
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinNameAttribute"/> class.
            </summary>
            <param name="name">
            Name of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.AddinNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinNameAttribute"/> class.
            </summary>
            <param name="name">
            Name of the add-in
            </param>
            <param name="locale">
            Locale of the name (for example, 'en-US', or 'en')
            </param>
        </member>
        <member name="P:Mono.Addins.AddinNameAttribute.Name">
            <value>
            Name of the add-in
            </value>
        </member>
        <member name="P:Mono.Addins.AddinNameAttribute.Locale">
            <summary>
            Locale of the name (for example, 'en-US', or 'en')
            </summary>
        </member>
        <member name="T:Mono.Addins.ContentType">
            <summary>
            Type of the content of a string extension node attribute
            </summary>
        </member>
        <member name="F:Mono.Addins.ContentType.Text">
            <summary>
            Plain text
            </summary>
        </member>
        <member name="F:Mono.Addins.ContentType.Class">
            <summary>
            A class name
            </summary>
        </member>
        <member name="F:Mono.Addins.ContentType.Resource">
            <summary>
            A resource name
            </summary>
        </member>
        <member name="F:Mono.Addins.ContentType.File">
            <summary>
            A file name
            </summary>
        </member>
        <member name="T:Mono.Addins.Database.AddinFileSystemExtension">
            <summary>
            An add-in file system extension.
            </summary>
            <remarks>
            File system extensions can override the behavior of the add-in scanner and provide custom rules for
            locating and scanning assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.ScanStarted">
            <summary>
            Called when the add-in scan is about to start
            </summary>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.ScanFinished">
            <summary>
            Called when the add-in scan has finished
            </summary>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.DirectoryExists(System.String)">
            <summary>
            Checks if a directory exists
            </summary>
            <returns>
            'true' if the directory exists
            </returns>
            <param name='path'>
            Directory path
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.FileExists(System.String)">
            <summary>
            Checks if a file exists
            </summary>
            <returns>
            'true' if the file exists
            </returns>
            <param name='path'>
            Path to the file
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.GetFiles(System.String)">
            <summary>
            Gets the files in a directory
            </summary>
            <returns>
            The full path of the files in the directory
            </returns>
            <param name='path'>
            Directory path
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.GetDirectories(System.String)">
            <summary>
            Gets the subdirectories of a directory
            </summary>
            <returns>
            The subdirectories.
            </returns>
            <param name='path'>
            The directory
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time of a file
            </summary>
            <returns>
            The last write time.
            </returns>
            <param name='filePath'>
            File path.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.OpenTextFile(System.String)">
            <summary>
            Opens a text file
            </summary>
            <returns>
            The text file stream
            </returns>
            <param name='path'>
            File path.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.OpenFile(System.String)">
            <summary>
            Opens a file.
            </summary>
            <returns>
            The file stream.
            </returns>
            <param name='path'>
            The file path.
            </param>
        </member>
        <member name="M:Mono.Addins.Database.AddinFileSystemExtension.GetReflectorForFile(Mono.Addins.Database.IAssemblyLocator,System.String)">
            <summary>
            Gets an assembly reflector for a file.
            </summary>
            <returns>
            The reflector for the file.
            </returns>
            <param name='locator'>
            An assembly locator
            </param>
            <param name='path'>
            A file path
            </param>
        </member>
        <member name="P:Mono.Addins.Database.AddinFileSystemExtension.RequiresIsolation">
            <summary>
            Gets a value indicating whether this <see cref="T:Mono.Addins.Database.AddinFileSystemExtension"/> needs to be isolated from the main execution process
            </summary>
            <value>
            <c>true</c> if requires isolation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Mono.Addins.ExtensionAttributeAttribute">
            <summary>
            Assigns an attribute value to an extension
            </summary>
            <remarks>
            This attribute can be used together with the [Extenion] attribute to specify
            a value for an attribute of the extension.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionAttributeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.ExtensionAttributeAttribute"/> class.
            </summary>
            <param name="name">
            Name of the attribute
            </param>
            <param name="value">
            Value of the attribute
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionAttributeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.ExtensionAttributeAttribute"/> class.
            </summary>
            <param name="type">
            Type of the extension for which the attribute value is being set
            </param>
            <param name="name">
            Name of the attribute
            </param>
            <param name="value">
            Value of the attribute
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionAttributeAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.ExtensionAttributeAttribute"/> class.
            </summary>
            <param name="path">
            Path of the extension for which the attribute value is being set
            </param>
            <param name="name">
            Name of the attribute
            </param>
            <param name="value">
            Value of the attribute
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionAttributeAttribute.Name">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionAttributeAttribute.Value">
            <summary>
            Value of the attribute
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionAttributeAttribute.Path">
            <summary>
            Path of the extension for which the attribute value is being set
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionAttributeAttribute.Type">
            <summary>
            Type of the extension for which the attribute value is being set
            </summary>
        </member>
        <member name="T:Mono.Addins.IAddinInstaller">
            <summary>
            An add-in installation handler
            </summary>
        </member>
        <member name="M:Mono.Addins.IAddinInstaller.InstallAddins(Mono.Addins.AddinRegistry,System.String,System.String[])">
            <summary>
            Installs a set of add-ins
            </summary>
            <param name="reg">
            Registry where to install
            </param>
            <param name="message">
            Message to show to the user when new add-ins have to be installed.
            </param>
            <param name="addinIds">
            List of IDs of the add-ins to be installed.
            </param>
        </member>
        <member name="T:Mono.Addins.ExtensionNodeAttribute">
            <summary>
            This attribute can be applied to an ExtensionNode subclass to specify the default name and description.
            </summary>
            <remarks>
            This information will be used when an extension point does not define a name or description for a node type.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeAttribute.#ctor">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="nodeName">
            Name of the node
            </param>
        </member>
        <member name="M:Mono.Addins.ExtensionNodeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="nodeName">
            Name of the node
            </param>
            <param name="description">
            Description of the node
            </param>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeAttribute.NodeName">
            <summary>
            Default name of the extension node
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeAttribute.Description">
            <summary>
            Default description of the extension node type
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionNodeAttribute.ExtensionAttributeType">
            <summary>
            Type of a custom attribute which can be used to specify metadata for this extension node type
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.DependencyCollection">
            <summary>
            A collection of dependency definitions.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.DependencyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.DependencyCollection"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.DependencyCollection.Add(Mono.Addins.Description.Dependency)">
            <summary>
            Adds a dependency to the collection
            </summary>
            <param name='dep'>
            The dependency to add.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.DependencyCollection.Remove(Mono.Addins.Description.Dependency)">
            <summary>
            Remove the specified dependency.
            </summary>
            <param name='dep'>
            Dependency to remove.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.DependencyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.Dependency"/> at the specified index.
            </summary>
            <param name="n">
            The idnex.
            </param>
        </member>
        <member name="T:Mono.Addins.ExtensionAttribute">
            <summary>
            Declares a type extension.
            </summary>
            <remarks>
            When applied to a class, specifies that the class is an extension
            class to be registered in a matching extension point.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionAttribute.#ctor">
            <summary>
            Initializes a new instance of the ExtensionAttribute class.
            </summary>
        </member>
        <member name="M:Mono.Addins.ExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="path">
            Path of the extension point.
            </param>
            <remarks>The path is only required if there are several extension points defined for the same type.</remarks>
        </member>
        <member name="M:Mono.Addins.ExtensionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="type">
            Type defining the extension point being extended
            </param>
            <remarks>
            This constructor can be used to explicitly specify the type that defines the extension point
            to be extended. By default, Mono.Addins will try to find any extension point defined in any
            of the base classes or interfaces. The type parameter can be used when there is more than one
            base type providing an extension point.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.Path">
            <summary>
            Path of the extension point being extended
            </summary>
            <remarks>
            The path is only required if there are several extension points defined for the same type.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.NodeName">
            <summary>
            Name of the extension node
            </summary>
            <remarks>
            Extension points may require extensions to use a specific node name.
            This is needed when an extension point may contain several different types of nodes.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.Id">
            <summary>
            Identifier of the extension node.
            </summary>
            <remarks>
            The ExtensionAttribute.InsertAfter and ExtensionAttribute.InsertBefore
            properties can be used to specify the relative location of a node. The nodes
            referenced in those properties must be defined either in the add-in host
            being extended, or in any add-in on which this add-in depends.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.InsertBefore">
            <summary>
            Identifier of the extension node before which this node has to be added in the extension point.
            </summary>
            <remarks>
            The ExtensionAttribute.InsertAfter and ExtensionAttribute.InsertBefore
            properties can be used to specify the relative location of a node. The nodes
            referenced in those properties must be defined either in the add-in host
            being extended, or in any add-in on which this add-in depends.
            </remarks>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.InsertAfter">
            <summary>
            Identifier of the extension node after which this node has to be added in the extension point.
            </summary>
        </member>
        <member name="P:Mono.Addins.ExtensionAttribute.Type">
            <summary>
            Type defining the extension point being extended
            </summary>
            <remarks>
            This property can be used to explicitly specify the type that defines the extension point
            to be extended. By default, Mono.Addins will try to find any extension point defined in any
            of the base classes or interfaces. This property can be used when there is more than one
            base type providing an extension point.
            </remarks>
        </member>
        <member name="T:Mono.Addins.RuntimeAddin">
            <summary>
            Run-time representation of an add-in.
            </summary>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.ToString">
            <summary>
            Returns a string that represents the current RuntimeAddin.
            </summary>
            <returns>
            A string that represents the current RuntimeAddin.
            </returns>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceString(System.String)">
            <summary>
            Gets a resource string
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <returns>
            The value of the resource string, or null if the resource can't be found.
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceString(System.String,System.Boolean)">
            <summary>
            Gets a resource string
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <param name="throwIfNotFound">
            When set to true, an exception will be thrown if the resource is not found.
            </param>
            <returns>
            The value of the resource string
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceString(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Gets a resource string
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <param name="throwIfNotFound">
            When set to true, an exception will be thrown if the resource is not found.
            </param>
            <param name="culture">
            Culture of the resource
            </param>
            <returns>
            The value of the resource string
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceObject(System.String)">
            <summary>
            Gets a resource object
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <returns>
            Value of the resource
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceObject(System.String,System.Boolean)">
            <summary>
            Gets a resource object
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <param name="throwIfNotFound">
            When set to true, an exception will be thrown if the resource is not found.
            </param>
            <returns>
            Value of the resource
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResourceObject(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Gets a resource object
            </summary>
            <param name="name">
            Name of the resource
            </param>
            <param name="throwIfNotFound">
            When set to true, an exception will be thrown if the resource is not found.
            </param>
            <param name="culture">
            Culture of the resource
            </param>
            <returns>
            Value of the resource
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetType(System.String)">
            <summary>
            Gets a type defined in the add-in
            </summary>
            <param name="typeName">
            Full name of the type
            </param>
            <returns>
            A type.
            </returns>
            <remarks>
            The type will be looked up in the assemblies that implement the add-in,
            and recursivelly in all add-ins on which it depends.
            
            This method throws an InvalidOperationException if the type can't be found.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetType(System.String,System.Boolean)">
            <summary>
            Gets a type defined in the add-in
            </summary>
            <param name="typeName">
            Full name of the type
            </param>
            <param name="throwIfNotFound">
            Indicates whether the method should throw an exception if the type can't be found.
            </param>
            <returns>
            A <see cref="T:System.Type"/>
            </returns>
            <remarks>
            The type will be looked up in the assemblies that implement the add-in,
            and recursivelly in all add-ins on which it depends.
            
            If the type can't be found, this method throw a InvalidOperationException if
            'throwIfNotFound' is 'true', or 'null' otherwise.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.CreateInstance(System.String)">
            <summary>
            Creates an instance of a type defined in the add-in
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <returns>
            A new instance of the type
            </returns>
            <remarks>
            The type will be looked up in the assemblies that implement the add-in,
            and recursivelly in all add-ins on which it depends.
            
            This method throws an InvalidOperationException if the type can't be found.
            
            The specified type must have a default constructor.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.CreateInstance(System.String,System.Boolean)">
            <summary>
            Creates an instance of a type defined in the add-in
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <param name="throwIfNotFound">
            Indicates whether the method should throw an exception if the type can't be found.
            </param>
            <returns>
            A new instance of the type
            </returns>
            <remarks>
            The type will be looked up in the assemblies that implement the add-in,
            and recursivelly in all add-ins on which it depends.
            
            If the type can't be found, this method throw a InvalidOperationException if
            'throwIfNotFound' is 'true', or 'null' otherwise.
            
            The specified type must have a default constructor.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetFilePath(System.String)">
            <summary>
            Gets the path of an add-in file
            </summary>
            <param name="fileName">
            Relative path of the file
            </param>
            <returns>
            Full path of the file
            </returns>
            <remarks>
            This method can be used to get the full path of a data file deployed together with the add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetFilePath(System.String[])">
            <summary>
            Gets the path of an add-in file
            </summary>
            <param name="filePath">
            Components of the file path
            </param>
            <returns>
            Full path of the file
            </returns>
            <remarks>
            This method can be used to get the full path of a data file deployed together with the add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResource(System.String)">
            <summary>
            Gets the content of a resource
            </summary>
            <param name="resourceName">
            Name of the resource
            </param>
            <returns>
            Content of the resource, or null if not found
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="M:Mono.Addins.RuntimeAddin.GetResource(System.String,System.Boolean)">
            <summary>
            Gets the content of a resource
            </summary>
            <param name="resourceName">
            Name of the resource
            </param>
            <param name="throwIfNotFound">
            When set to true, an exception will be thrown if the resource is not found.
            </param>
            <returns>
            Content of the resource.
            </returns>
            <remarks>
            The add-in engine will look for resources in the main add-in assembly and in all included add-in assemblies.
            </remarks>
        </member>
        <member name="P:Mono.Addins.RuntimeAddin.Id">
            <summary>
            Identifier of the add-in.
            </summary>
        </member>
        <member name="P:Mono.Addins.RuntimeAddin.Version">
            <summary>
            Version of the add-in.
            </summary>
        </member>
        <member name="P:Mono.Addins.RuntimeAddin.PrivateDataPath">
            <summary>
            Path to a directory where add-ins can store private configuration or status data
            </summary>
        </member>
        <member name="P:Mono.Addins.RuntimeAddin.Localizer">
            <summary>
            Localizer which can be used to localize strings defined in this add-in
            </summary>
        </member>
        <member name="T:Mono.Addins.ImportAddinAssemblyAttribute">
            <summary>
            Declares an add-in assembly import
            </summary>
            <remarks>
            An add-in may be composed by several assemblies and data files.
            Assemblies must be declared in the main assembly using this attribute, or in the XML manifest.
            
            It is important to properly declare all files used by an add-in.
            For example, when a type from the add-in is required (e.g. an ICommand implementation), 
            only properly declared assemblies will be checked. 
            This information is also used by setup tools to know exactly what needs to be packaged when creating 
            an add-in package, or to know what needs to be deleted when removing an add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ImportAddinAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="filePath">
            Path to the assembly. Must be relative to the assembly declaring this attribute.
            </param>
        </member>
        <member name="P:Mono.Addins.ImportAddinAssemblyAttribute.FilePath">
            <summary>
            Path to the assembly. Must be relative to the assembly declaring this attribute.
            </summary>
        </member>
        <member name="P:Mono.Addins.ImportAddinAssemblyAttribute.Scan">
            <summary>
            When set to true (the default), the included assembly will be scanned
            looking for extension point declarations.
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinErrorEventHandler">
            <summary>
            Delegate to be used in add-in error subscriptions
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinErrorEventArgs">
            <summary>
            Provides information about an add-in loading error.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinErrorEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinErrorEventArgs"/> class.
            </summary>
            <param name="message">
            Error message
            </param>
            <param name="addinId">
            Add-in identifier.
            </param>
            <param name="exception">
            Exception that caused the error.
            </param>
        </member>
        <member name="P:Mono.Addins.AddinErrorEventArgs.Exception">
            <summary>
            Exception that caused the error.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinErrorEventArgs.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:Mono.Addins.Addin">
            <summary>
            An add-in.
            </summary>
        </member>
        <member name="M:Mono.Addins.Addin.SupportsVersion(System.String)">
            <summary>
            Checks version compatibility.
            </summary>
            <param name="version">
            An add-in version.
            </param>
            <returns>
            True if the provided version is compatible with this add-in.
            </returns>
            <remarks>
            This method checks the CompatVersion property to know if the provided version is compatible with the version of this add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Addin.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mono.Addins.Addin"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Mono.Addins.Addin"/>.
            </returns>
        </member>
        <member name="M:Mono.Addins.Addin.CompareVersions(System.String,System.String)">
            <summary>
            Compares two add-in versions
            </summary>
            <returns>
            -1 if v1 is greater than v2, 0 if v1 == v2, 1 if v1 less than v2
            </returns>
            <param name='v1'>
            A version
            </param>
            <param name='v2'>
            A version
            </param>
        </member>
        <member name="M:Mono.Addins.Addin.GetFullId(System.String,System.String,System.String)">
            <summary>
            Returns the identifier of an add-in
            </summary>
            <returns>
            The full identifier.
            </returns>
            <param name='ns'>
            Namespace of the add-in
            </param>
            <param name='id'>
            Name of the add-in
            </param>
            <param name='version'>
            Version of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.Addin.GetIdName(System.String)">
            <summary>
            Given a full add-in identifier, returns the namespace and name of the add-in (it removes the version number)
            </summary>
            <param name='addinId'>
            Add-in identifier.
            </param>
        </member>
        <member name="M:Mono.Addins.Addin.GetIdVersion(System.String)">
            <summary>
            Given a full add-in identifier, returns the version the add-in
            </summary>
            <returns>
            The version.
            </returns>
        </member>
        <member name="M:Mono.Addins.Addin.GetIdParts(System.String,System.String@,System.String@)">
            <summary>
            Splits a full add-in identifier in name and version
            </summary>
            <param name='addinId'>
            Add-in identifier.
            </param>
            <param name='name'>
            The resulting name
            </param>
            <param name='version'>
            The resulting version
            </param>
        </member>
        <member name="P:Mono.Addins.Addin.Id">
            <summary>
            Full identifier of the add-in, including namespace and version.
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Namespace">
            <summary>
            Namespace of the add-in.
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.LocalId">
            <summary>
            Identifier of the add-in (without namespace)
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Version">
            <summary>
            Version of the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Name">
            <summary>
            Display name of the add-in
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Properties">
            <summary>
            Custom properties specified in the add-in header
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Enabled">
            <summary>
            Gets or sets the enabled status of the add-in.
            </summary>
            <remarks>
            This property can be used to enable or disable an add-in.
            The enabled status of an add-in is stored in the add-in registry,
            so when an add-in is disabled, it will be disabled for all applications
            sharing the same registry.
            When an add-in is enabled or disabled, the extension points currently loaded
            in memory will be properly updated to include or exclude extensions from the add-in.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Addin.IsUserAddin">
            <summary>
            Returns 'true' if the add-in is installed in the user's personal folder
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.AddinFile">
            <summary>
            Path to the add-in file (it can be an assembly or a standalone XML manifest)
            </summary>
        </member>
        <member name="P:Mono.Addins.Addin.Description">
            <summary>
            Description of the add-in
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ConditionTypeDescriptionCollection">
            <summary>
            A collection of condition types
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ConditionTypeDescriptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ConditionTypeDescriptionCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ConditionTypeDescriptionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ConditionTypeDescription"/> at the specified index.
            </summary>
            <param name="n">
            Index.
            </param>
            <returns>
            The condition.
            </returns>
        </member>
        <member name="T:Mono.Addins.Description.ModuleCollection">
            <summary>
            A collection of module descriptions
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ModuleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ModuleCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ModuleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ModuleDescription"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="T:Mono.Addins.Description.NodeTypeAttributeCollection">
            <summary>
            A collection of node attributes
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.NodeTypeAttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.NodeTypeAttributeCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttributeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.NodeTypeAttribute"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="T:Mono.Addins.Description.AssemblyDependency">
            <summary>
            Definition of a dependency of an add-in on an assembly.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.AssemblyDependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.AssemblyDependency"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.AssemblyDependency.FullName">
            <summary>
            Gets or sets the full name of the assembly
            </summary>
            <value>
            The full name of the assembly.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AssemblyDependency.Package">
            <summary>
            Gets or sets the name of the package that provides the assembly.
            </summary>
            <value>
            The name of the package that provides the assembly.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AssemblyDependency.Name">
            <summary>
            Display name of the dependency
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Mono.Addins.AddinModuleAttribute">
            <summary>
            Declares an optional add-in module
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinModuleAttribute.#ctor(System.String)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="assemblyFile">
            Relative path to the assembly that implements the optional module
            </param>
        </member>
        <member name="P:Mono.Addins.AddinModuleAttribute.AssemblyFile">
            <summary>
            Relative path to the assembly that implements the optional module
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinRegistry">
            <summary>
            An add-in registry.
            </summary>
            <remarks>
            An add-in registry is a data structure used by the add-in engine to locate add-ins to load.
            
            A registry can be configured to look for add-ins in several directories. However, add-ins
            copied to those directories won't be detected until an explicit add-in scan is requested.
            The registry can be updated by an application by calling Registry.Update(), or by a user by
            running the 'mautil' add-in setup tool.
            
            The registry has information about the location of every add-in and a timestamp of the last
            check, so the Update method will only scan new or modified add-ins. An application can
            add a call to Registry.Update() in the Main method to detect all new add-ins every time the
            app is started.
            
            Every add-in added to the registry is parsed and validated, and if there is any error it
            will be rejected. The registry is also in charge of scanning the add-in assemblies and look
            for extensions and other information declared using custom attributes. That information is
            merged with the manifest information (if there is one) to create a complete add-in
            description ready to be used at run-time.
            
            Mono.Addins allows sharing an add-in registry among several applications. In this context,
            all applications sharing the registry share the same extension point model, and it is
            possible to implement add-ins which extend several hosts.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="registryPath">
            Location of the add-in registry.
            </param>
            <remarks>
            Creates a new add-in registry located in the provided path.
            The add-in registry will look for add-ins in an 'addins'
            subdirectory of the provided registryPath.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="registryPath">
            Location of the add-in registry.
            </param>
            <param name="startupDirectory">
            Location of the application.
            </param>
            <remarks>
            Creates a new add-in registry located in the provided path.
            The add-in registry will look for add-ins in an 'addins'
            subdirectory of the provided registryPath.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinRegistry"/> class.
            </summary>
            <param name="registryPath">
            Location of the add-in registry.
            </param>
            <param name="startupDirectory">
            Location of the application.
            </param>
            <param name="addinsDir">
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            Creates a new add-in registry located in the provided path.
            Configuration information about the add-in registry will be stored in
            'registryPath'. The add-in registry will look for add-ins in the provided
            'addinsDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.AddinRegistry"/> class.
            </summary>
            <param name="registryPath">
            Location of the add-in registry.
            </param>
            <param name="startupDirectory">
            Location of the application.
            </param>
            <param name="addinsDir">
            Add-ins directory. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <param name="databaseDir">
            Location of the add-in database. If the path is relative, it is considered to be relative
            to the configDir directory.
            </param>
            <remarks>
            Creates a new add-in registry located in the provided path.
            Configuration information about the add-in registry will be stored in
            'registryPath'. The add-in registry will look for add-ins in the provided
            'addinsDir' directory. Cached information about add-ins will be stored in
            the 'databaseDir' directory.
            
            When specifying a path, it is possible to use a special folder name as root.
            For example: [Personal]/.config/MyApp. In this case, [Personal] will be replaced
            by the location of the Environment.SpecialFolder.Personal folder. Any value
            of the Environment.SpecialFolder enumeration can be used (always between square
            brackets)
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetGlobalRegistry">
            <summary>
            Gets the global registry.
            </summary>
            <returns>
            The global registry
            </returns>
            <remarks>
            The global add-in registry is created in "~/.config/mono.addins",
            and it is the default registry used when none is specified.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.Dispose">
            <summary>
            Disposes the add-in engine.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetAddin(System.String)">
            <summary>
            Returns an add-in from the registry.
            </summary>
            <param name="id">
            Identifier of the add-in.
            </param>
            <returns>
            The add-in, or 'null' if not found.
            </returns>
            <remarks>
            The add-in identifier may optionally include a version number, for example: "TextEditor.Xml,1.2"
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetAddin(System.String,System.Boolean)">
            <summary>
            Returns an add-in from the registry.
            </summary>
            <param name="id">
            Identifier of the add-in.
            </param>
            <param name="exactVersionMatch">
            'true' if the exact add-in version must be found.
            </param>
            <returns>
            The add-in, or 'null' if not found.
            </returns>
            <remarks>
            The add-in identifier may optionally include a version number, for example: "TextEditor.Xml,1.2".
            In this case, if the exact version is not found and exactVersionMatch is 'false', it will
            return one than is compatible with the required version.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetModules(Mono.Addins.AddinSearchFlags)">
            <summary>
            Gets all add-ins or add-in roots registered in the registry.
            </summary>
            <returns>
            The addins.
            </returns>
            <param name='flags'>
            Flags.
            </param>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetAddins">
            <summary>
            Gets all add-ins registered in the registry.
            </summary>
            <returns>
            Add-ins registered in the registry.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetAddinRoots">
            <summary>
            Gets all add-in roots registered in the registry.
            </summary>
            <returns>
            Descriptions of all add-in roots.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.GetAddinDescription(Mono.Addins.IProgressStatus,System.String)">
            <summary>
            Loads an add-in description
            </summary>
            <param name="progressStatus">
            Progress tracker.
            </param>
            <param name="file">
            Name of the file to load
            </param>
            <returns>
            An add-in description
            </returns>
            <remarks>
            This method loads an add-in description from a file. The file can be an XML manifest or an
            assembly that implements an add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.ReadAddinManifestFile(System.String)">
            <summary>
            Reads an XML add-in manifest
            </summary>
            <param name="file">
            Path to the XML file
            </param>
            <returns>
            An add-in description
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.ReadAddinManifestFile(System.IO.TextReader,System.String)">
            <summary>
            Reads an XML add-in manifest
            </summary>
            <param name="reader">
            Reader that contains the XML
            </param>
            <param name="baseFile">
            Base path to use to discover add-in files
            </param>
            <returns>
            An add-in description
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.IsAddinEnabled(System.String)">
            <summary>
            Checks whether an add-in is enabled.
            </summary>
            <param name="id">
            Identifier of the add-in.
            </param>
            <returns>
            'true' if the add-in is enabled.
            </returns>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.EnableAddin(System.String)">
            <summary>
            Enables an add-in.
            </summary>
            <param name="id">
            Identifier of the add-in
            </param>
            <remarks>
            If the enabled add-in depends on other add-ins which are disabled,
            those will automatically be enabled too.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.DisableAddin(System.String)">
            <summary>
            Disables an add-in.
            </summary>
            <param name="id">
            Identifier of the add-in.
            </param>
            <remarks>
            When an add-in is disabled, all extension points it defines will be ignored
            by the add-in engine. Other add-ins which depend on the disabled add-in will
            also automatically be disabled.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.RegisterForUninstall(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers a set of add-ins for uninstallation.
            </summary>
            <param name='id'>
            Identifier of the add-in
            </param>
            <param name='files'>
            Files to be uninstalled
            </param>
            <remarks>
            This method can be used to instruct the add-in manager to uninstall
            an add-in the next time the registry is updated. This is useful
            when an add-in manager can't delete an add-in because if it is
            loaded.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.IsRegisteredForUninstall(System.String)">
            <summary>
            Determines whether an add-in is registered for uninstallation
            </summary>
            <returns>
            <c>true</c> if the add-in is registered for uninstallation
            </returns>
            <param name='addinId'>
            Identifier of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.DumpFile(System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.ResetConfiguration">
            <summary>
            Resets the configuration files of the registry
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.Update">
            <summary>
            Updates the add-in registry.
            </summary>
            <remarks>
            This method must be called after modifying, installing or uninstalling add-ins.
            
            When calling Update, every add-in added to the registry is parsed and validated,
            and if there is any error it will be rejected. It will also cache add-in information
            needed at run-time.
            
            If during the update operation the registry finds new add-ins or detects that some
            add-ins have been deleted, the loaded extension points will be updated to include
            or exclude extension nodes from those add-ins.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.Update(Mono.Addins.IProgressStatus)">
            <summary>
            Updates the add-in registry.
            </summary>
            <param name="monitor">
            Progress monitor to keep track of the update operation.
            </param>
            <remarks>
            This method must be called after modifying, installing or uninstalling add-ins.
            
            When calling Update, every add-in added to the registry is parsed and validated,
            and if there is any error it will be rejected. It will also cache add-in information
            needed at run-time.
            
            If during the update operation the registry finds new add-ins or detects that some
            add-ins have been deleted, the loaded extension points will be updated to include
            or exclude extension nodes from those add-ins.
            </remarks>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.Rebuild(Mono.Addins.IProgressStatus)">
            <summary>
            Regenerates the cached data of the add-in registry.
            </summary>
            <param name="monitor">
            Progress monitor to keep track of the rebuild operation.
            </param>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.RegisterExtension(System.Object)">
            <summary>
            Registers an extension. Only AddinFileSystemExtension extensions are supported right now.
            </summary>
            <param name='extension'>
            The extension to register
            </param>
        </member>
        <member name="M:Mono.Addins.AddinRegistry.UnregisterExtension(System.Object)">
            <summary>
            Unregisters an extension.
            </summary>
            <param name='extension'>
            The extension to unregister
            </param>
        </member>
        <member name="P:Mono.Addins.AddinRegistry.RegistryPath">
            <summary>
            Location of the add-in registry.
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinRegistry.HasPendingUninstalls">
            <summary>
            Gets a value indicating whether there are pending add-ins to be uninstalled installed
            </summary>
        </member>
        <member name="P:Mono.Addins.AddinRegistry.DefaultAddinsFolder">
            <summary>
            Gets the default add-ins folder of the registry.
            </summary>
            <remarks>
            For every add-in registry there is an add-in folder where the registry will look for add-ins by default.
            This folder is an "addins" subdirectory of the directory where the repository is located. In most cases,
            this folder will only contain .addins files referencing other more convenient locations for add-ins.
            </remarks>
        </member>
        <member name="T:Mono.Addins.AddinSearchFlags">
            <summary>
            Addin search flags.
            </summary>
        </member>
        <member name="F:Mono.Addins.AddinSearchFlags.IncludeAddins">
            <summary>
            Add-ins are included in the search
            </summary>
        </member>
        <member name="F:Mono.Addins.AddinSearchFlags.IncludeRoots">
            <summary>
            Add-in roots are included in the search
            </summary>
        </member>
        <member name="F:Mono.Addins.AddinSearchFlags.IncludeAll">
            <summary>
            Both add-in and add-in roots are included in the search
            </summary>
        </member>
        <member name="F:Mono.Addins.AddinSearchFlags.LatestVersionsOnly">
            <summary>
            Only the latest version of every add-in or add-in root is included in the search
            </summary>
        </member>
        <member name="T:Mono.Addins.ConsoleProgressStatus">
            <summary>
            An IProgressStatus class which writes output to the console.
            </summary>
        </member>
        <member name="T:Mono.Addins.IProgressStatus">
            <summary>
            Progress status listener.
            </summary>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.SetMessage(System.String)">
            <summary>
            Sets the description of the current operation.
            </summary>
            <param name="msg">
            A message
            </param>
            <remarks>
            This method is called by the add-in engine to show a description of the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.SetProgress(System.Double)">
            <summary>
            Sets the progress of the operation.
            </summary>
            <param name="progress">
            A number between 0 and 1. 0 means no progress, 1 means operation completed.
            </param>
            <remarks>
            This method is called by the add-in engine to show the progress of the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.Log(System.String)">
            <summary>
            Writes text to the log.
            </summary>
            <param name="msg">
            Message to write
            </param>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.ReportWarning(System.String)">
            <summary>
            Reports a warning.
            </summary>
            <param name="message">
            Warning message
            </param>
            <remarks>
            This method is called by the add-in engine to report a warning in the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.ReportError(System.String,System.Exception)">
            <summary>
            Reports an error.
            </summary>
            <param name="message">
            Error message
            </param>
            <param name="exception">
            Exception that caused the error. It can be null.
            </param>
            <remarks>
            This method is called by the add-in engine to report an error occurred while executing the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.IProgressStatus.Cancel">
            <summary>
            Cancels the operation being montorized.
            </summary>
        </member>
        <member name="P:Mono.Addins.IProgressStatus.LogLevel">
            <summary>
            Log level requested by the user: 0: no log, 1: normal log, >1 verbose log
            </summary>
        </member>
        <member name="P:Mono.Addins.IProgressStatus.IsCanceled">
            <summary>
            Returns True when the user requested to cancel this operation
            </summary>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="verboseLog">
            Set to true to enabled verbose log
            </param>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.#ctor(System.Int32)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="logLevel">
            Verbosity level. 0: not verbose, 1: normal, >1 extra verbose
            </param>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.SetMessage(System.String)">
            <summary>
            Sets the description of the current operation.
            </summary>
            <param name="msg">
            A message
            </param>
            <remarks>
            This method is called by the add-in engine to show a description of the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.SetProgress(System.Double)">
            <summary>
            Sets the progress of the operation.
            </summary>
            <param name="progress">
            A number between 0 and 1. 0 means no progress, 1 means operation completed.
            </param>
            <remarks>
            This method is called by the add-in engine to show the progress of the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.Log(System.String)">
            <summary>
            Writes text to the log.
            </summary>
            <param name="msg">
            Message to write
            </param>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.ReportWarning(System.String)">
            <summary>
            Reports a warning.
            </summary>
            <param name="message">
            Warning message
            </param>
            <remarks>
            This method is called by the add-in engine to report a warning in the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.ReportError(System.String,System.Exception)">
            <summary>
            Reports an error.
            </summary>
            <param name="message">
            Error message
            </param>
            <param name="exception">
            Exception that caused the error. It can be null.
            </param>
            <remarks>
            This method is called by the add-in engine to report an error occurred while executing the operation being monitorized.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ConsoleProgressStatus.Cancel">
            <summary>
            Cancels the operation being montorized.
            </summary>
        </member>
        <member name="P:Mono.Addins.ConsoleProgressStatus.IsCanceled">
            <summary>
            Returns True when the user requested to cancel this operation
            </summary>
        </member>
        <member name="P:Mono.Addins.ConsoleProgressStatus.LogLevel">
            <summary>
            Log level requested by the user: 0: no log, 1: normal log, >1 verbose log
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.AddinDependency">
            <summary>
            Definition of a dependency of an add-in on another add-in.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.AddinDependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.AddinDependency"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.AddinDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.AddinDependency"/> class.
            </summary>
            <param name="fullId">
            Full identifier of the add-in (includes version)
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.AddinDependency"/> class.
            </summary>
            <param name="id">
            Identifier of the add-in.
            </param>
            <param name="version">
            Version of the add-in.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.AddinDependency.FullAddinId">
            <summary>
            Gets the full addin identifier.
            </summary>
            <value>
            The full addin identifier.
            </value>
            <remarks>
            Includes namespace and version number. For example: MonoDevelop.TextEditor,1.0
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.AddinDependency.AddinId">
            <summary>
            Gets or sets the addin identifier.
            </summary>
            <value>
            The addin identifier.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDependency.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.AddinDependency.Name">
            <summary>
            Display name of the dependency.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Mono.Addins.NodeAttributeAttribute">
            <summary>
            Indicates that a field or property is bound to a node attribute
            </summary>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="description">
            Description of the attribute.
            </param>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="required">
            Indicates whether the attribute is required or not.
            </param>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="required">
            Indicates whether the attribute is required or not.
            </param>
            <param name="description">
            Description of the attribute.
            </param>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="type">
            Type of the extension node attribute.
            </param>
            <remarks>
            The type of the attribute is only required when applying this attribute at class level.
            It is not required when it is applied to a field, since the attribute type will be the type of the field.
            </remarks>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="type">
            Type of the extension node attribute.
            </param>
            <param name="description">
            Description of the attribute.
            </param>
            <remarks>
            The type of the attribute is only required when applying this attribute at class level.
            It is not required when it is applied to a field, since the attribute type will be the type of the field.
            </remarks>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="type">
            Type of the extension node attribute.
            </param>
            <param name="required">
            Indicates whether the attribute is required or not.
            </param>
            <remarks>
            The type of the attribute is only required when applying this attribute at class level.
            It is not required when it is applied to a field, since the attribute type will be the type of the field.
            </remarks>
        </member>
        <member name="M:Mono.Addins.NodeAttributeAttribute.#ctor(System.String,System.Type,System.Boolean,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">
            XML name of the attribute.
            </param>
            <param name="type">
            Type of the extension node attribute.
            </param>
            <param name="required">
            Indicates whether the attribute is required or not.
            </param>
            <param name="description">
            Description of the attribute.
            </param>
            <remarks>
            The type of the attribute is only required when applying this attribute at class level.
            It is not required when it is applied to a field, since the attribute type will be the type of the field.
            </remarks>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.Name">
            <summary>
            XML name of the attribute.
            </summary>
            <remarks>
            If the name is not specified, the field name to which the [NodeAttribute]
            is applied will be used as name. Providing a name is mandatory when applying
            [NodeAttribute] at class level.
            </remarks>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.Required">
            <summary>
            Indicates whether the attribute is required or not.
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.Type">
            <summary>
            Type of the extension node attribute.
            </summary>
            <remarks>
            To be used only when applying [NodeAttribute] at class level. It is not required when it
            is applied to a field, since the attribute type will be the type of the field.
            </remarks>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.Description">
            <summary>
            Description of the attribute.
            </summary>
            <remarks>
            To be used in the extension point documentation.
            </remarks>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.Localizable">
            <summary>
            When set to True, the value of the field or property is expected to be a string id which
            will be localized by the add-in engine
            </summary>
        </member>
        <member name="P:Mono.Addins.NodeAttributeAttribute.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <remarks>
            Allows specifying the type of the content of a string attribute.
            This value is for documentation purposes only.
            </remarks>
        </member>
        <member name="T:Mono.Addins.Description.AddinPropertyCollection">
            <summary>
            A collection of add-in properties
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.GetPropertyValue(System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <returns>
            The property value.
            </returns>
            <param name='name'>
            Name of the property.
            </param>
            <remarks>
            If the property is localized, it will return the value for the current language if exists, or the
            default value if it doesn't.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.GetPropertyValue(System.String,System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <returns>
            The property value.
            </returns>
            <param name='name'>
            Name of the property.
            </param>
            <param name='locale'>
            Locale for which the value must be returned.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.SetPropertyValue(System.String,System.String)">
            <summary>
            Sets the value of a property
            </summary>
            <param name='name'>
            Name of the property
            </param>
            <param name='value'>
            New value.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.SetPropertyValue(System.String,System.String,System.String)">
            <summary>
            Sets the value of a property for a specific locale
            </summary>
            <param name='name'>
            Name of the property.
            </param>
            <param name='value'>
            New value.
            </param>
            <param name='locale'>
            Locale of the property to be set.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.RemoveProperty(System.String)">
            <summary>
            Removes a property.
            </summary>
            <param name='name'>
            Name of the property.
            </param>
            <remarks>
            This method only removes properties which have no locale set.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.AddinPropertyCollection.RemoveProperty(System.String,System.String)">
            <summary>
            Removes a property with a specified locale
            </summary>
            <param name='name'>
            Name of the property
            </param>
            <param name='locale'>
            Locale of the property
            </param>
        </member>
        <member name="T:Mono.Addins.ImportAddinFileAttribute">
            <summary>
            Declares an add-in file import
            </summary>
            <remarks>
            An add-in may be composed by several assemblies and data files.
            Data files must be declared in the main assembly using this attribute, or in the XML manifest.
            
            It is important to properly declare all files used by an add-in. 
            This information is used by setup tools to know exactly what needs to be packaged when creating 
            an add-in package, or to know what needs to be deleted when removing an add-in.
            </remarks>
        </member>
        <member name="M:Mono.Addins.ImportAddinFileAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="filePath">
            Path to the file. Must be relative to the assembly declaring this attribute.
            </param>
        </member>
        <member name="P:Mono.Addins.ImportAddinFileAttribute.FilePath">
            <summary>
            Path to the file. Must be relative to the assembly declaring this attribute.
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.NodeSetIdCollection">
            <summary>
            A collection of node set identifiers
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.Add(System.String)">
            <summary>
            Add the specified node set identifier.
            </summary>
            <param name='nodeSetId'>
            Node set identifier.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.Remove(System.String)">
            <summary>
            Remove a node set identifier
            </summary>
            <param name='nodeSetId'>
            Node set identifier.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.Contains(System.String)">
            <summary>
            Checks if the specified identifier is present in the collection
            </summary>
            <param name='nodeSetId'>
            <c>true</c> if the node set identifier is present.
            </param>
        </member>
        <member name="M:Mono.Addins.Description.NodeSetIdCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the specified node set identifier
            </summary>
            <returns>
            The index.
            </returns>
            <param name='nodeSetId'>
            A node set identifier.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.NodeSetIdCollection.Item(System.Int32)">
            <summary>
            Gets the node set identifier at the specified index.
            </summary>
            <param name='n'>
            An index.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.NodeSetIdCollection.Count">
            <summary>
            Gets the item count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Mono.Addins.Description.ModuleDescription">
            <summary>
            A module definition.
            </summary>
            <remarks>
            Optional modules can be used to declare extensions which will be registered only if some
            specified add-in dependencies can be satisfied.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ModuleDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ModuleDescription"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ModuleDescription.DependsOnAddin(System.String)">
            <summary>
            Checks if this module depends on the specified add-in.
            </summary>
            <returns>
            <c>true</c> if there is a dependency.
            </returns>
            <param name='addinId'>
            Identifier of the add-in
            </param>
        </member>
        <member name="M:Mono.Addins.Description.ModuleDescription.AddExtensionNode(System.String,System.String)">
            <summary>
            Adds an extension node to the module.
            </summary>
            <returns>
            The extension node.
            </returns>
            <param name='path'>
            Path that identifies the extension point.
            </param>
            <param name='nodeName'>
            Node name.
            </param>
            <remarks>
            This method creates a new Extension object for the provided path if none exist.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ModuleDescription.GetExtension(System.String)">
            <summary>
            Gets an extension instance.
            </summary>
            <returns>
            The extension instance.
            </returns>
            <param name='path'>
            Path that identifies the extension point that the extension extends.
            </param>
            <remarks>
            This method creates a new Extension object for the provided path if none exist.
            </remarks>
        </member>
        <member name="M:Mono.Addins.Description.ModuleDescription.AddAssemblyReference(System.String,System.String)">
            <summary>
            Adds an add-in reference (there is a typo in the method name)
            </summary>
            <param name='id'>
            Identifier of the add-in.
            </param>
            <param name='version'>
            Version of the add-in.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.IgnorePaths">
            <summary>
            Gets the list of paths to be ignored by the add-in scanner.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.AllFiles">
            <summary>
            Gets all external files
            </summary>
            <value>
            All files.
            </value>
            <remarks>
            External files are data files and assemblies explicitly referenced in the Runtime section of the add-in manifest.
            </remarks>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.Assemblies">
            <summary>
            Gets the list of external assemblies used by this module.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.DataFiles">
            <summary>
            Gets the list of external data files used by this module
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.Dependencies">
            <summary>
            Gets the dependencies of this module
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ModuleDescription.Extensions">
            <summary>
            Gets the extensions of this module
            </summary>
        </member>
        <member name="T:Mono.Addins.AddinCategoryAttribute">
            <summary>
            Addin category attribute.
            </summary>
        </member>
        <member name="M:Mono.Addins.AddinCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute
            </summary>
            <param name="category">
            The category to which the add-in belongs
            </param>
        </member>
        <member name="P:Mono.Addins.AddinCategoryAttribute.Category">
            <summary>
            The category to which the add-in belongs
            </summary>
        </member>
        <member name="T:Mono.Addins.Description.ExtensionNodeTypeCollection">
            <summary>
            A collection of node types.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.ExtensionNodeTypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.ExtensionNodeTypeCollection"/> class.
            </summary>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeTypeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeType"/> at the specified index.
            </summary>
            <param name="n">
            The index.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.ExtensionNodeTypeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mono.Addins.Description.ExtensionNodeType"/> with the specified id.
            </summary>
            <param name="id">
            Identifier.
            </param>
        </member>
        <member name="T:Mono.Addins.Description.NodeTypeAttribute">
            <summary>
            Description of the attribute of a node type.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.NodeTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Addins.Description.NodeTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mono.Addins.Description.NodeTypeAttribute.CopyFrom(Mono.Addins.Description.NodeTypeAttribute)">
            <summary>
            Copies data from another node attribute.
            </summary>
            <param name='att'>
            The attribute from which to copy.
            </param>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mono.Addins.Description.NodeTypeAttribute"/> is required.
            </summary>
            <value>
            <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.Localizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mono.Addins.Description.NodeTypeAttribute"/> is localizable.
            </summary>
            <value>
            <c>true</c> if localizable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.Type">
            <summary>
            Gets or sets the type of the attribute.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Mono.Addins.Description.NodeTypeAttribute.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <remarks>
            Allows specifying the type of the content of a string attribute.
            The value of this property is only informative, and it doesn't
            have any effect on how add-ins are packaged or loaded.
            </remarks>
        </member>
    </members>
</doc>
