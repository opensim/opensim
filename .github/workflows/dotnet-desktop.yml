name: LastExtendedDotNetAutoBuild

on:
  push:
    branches: [ "main" ]   # Ausloesen bei jedem Push auf den main Branch
  pull_request:
    branches: [ "main" ]   # Ausloesen bei jedem Pull-Request auf den main Branch

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]   # Matrix fuer Windows und Linux
        configuration: [Debug, Release]      # Unterschiedliche Konfigurationen (Debug und Release)

    runs-on: ${{ matrix.os }}  # Laeuft entweder auf Windows oder Linux basierend auf der Matrix

    env:
      Solution_Name: OpenSim.sln                        # Deine .sln-Datei oder spezifische Loesung
      Test_Project_Path: MyTestProject/MyTestProject.csproj # Pfad zu einem Testprojekt, falls erforderlich

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Installiere .NET 8.0 (oder die Version, die du benoetigst)
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Wenn Windows, MSBuild Setup hinzufuegen
    - name: Setup MSBuild.exe (Windows only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    # Restore alle NuGet-Pakete
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.Solution_Name }}

    # Build das Projekt in Debug oder Release
    - name: Build the project
      run: msbuild ${{ env.Solution_Name }} /p:Configuration=${{ matrix.configuration }}
      if: runner.os == 'Windows'

    # Build das Projekt in Debug oder Release (fuer Linux)
    - name: Build the project (Linux)
      run: dotnet build ${{ env.Solution_Name }} -c ${{ matrix.configuration }}
      if: runner.os == 'Linux'

    # Beispiel fuer das Hinzufuegen von zusaetzlichen Repositories und Dateien
    - name: Add additional repositories and files
      run: |
        # Fuege Scripts und andere Verzeichnisse hinzu
        git clone https://github.com/ManfredAabye/opensim-ossl-example-scripts.git
        cp -r opensim-ossl-example-scripts/ScriptsAssetSet $GITHUB_WORKSPACE/opensim/bin/assets
        cp -r opensim-ossl-example-scripts/inventory/ScriptsLibrary $GITHUB_WORKSPACE/opensim/bin/inventory/ScriptsLibrary

        # Fuege das MoneyServer-Modul hinzu
        git clone https://github.com/ManfredAabye/opensimcurrencyserver-dotnet.git
        cp -r opensimcurrencyserver-dotnet/addon-modules $GITHUB_WORKSPACE/opensim/addon-modules
        cp -r opensimcurrencyserver-dotnet/bin $GITHUB_WORKSPACE/opensim/bin

        # Fuege Terrain und Avatare hinzu
        git clone https://github.com/ManfredAabye/OpenSim-Terrain.git
        cp -r OpenSim-Terrain/* $GITHUB_WORKSPACE/opensim/bin

        # Male/Female Avatar Assets
        git clone https://github.com/RuthAndRoth/Ruth2.git
        cp -r RuthAndRoth/Ruth2/Artifacts/IAR $GITHUB_WORKSPACE/opensim/bin/Library
        git clone https://github.com/RuthAndRoth/Roth2.git
        cp -r RothAndRoth/Roth2/Artifacts/IAR $GITHUB_WORKSPACE/opensim/bin/Library

    # Optional: Erstelle eine ZIP-Datei der Builds oder Artefakte
    - name: Create Build Artifacts
      run: |
        mkdir $GITHUB_WORKSPACE/output
        cp -r $GITHUB_WORKSPACE/opensim/bin/* $GITHUB_WORKSPACE/output
        zip -r $GITHUB_WORKSPACE/output/opensim-build.zip $GITHUB_WORKSPACE/output/

    # Lade Artefakte hoch
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: OpenSim Build Artifacts
        path: $GITHUB_WORKSPACE/output/opensim-build.zip
